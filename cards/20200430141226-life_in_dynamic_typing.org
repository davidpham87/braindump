#+TITLE: Life In Dynamic Typing
#+OPTIONS: toc:nil
#+ROAM_ALIAS: life-dynamic-type
#+ROAM_TAGS: dynamic-typing test clj david-nolen cljs

* Life In Dynamic Typing

  - tags :: [[file:../decks/clojure.org][Clojure]]

  In dynamic typed language, assertions are used often to check assumption of
  your input data. In Clojure the =:pre= and =:post= conditions can be used
  effectively to fill this purpose.

  #+BEGIN_SRC clojure
     (defn f [x]
       {:pre [(integer? x)]
        :post string?}
       (str x))
  #+END_SRC

  ={:elide-asserts true}= in production build compiler options to remove =:pre=
  and =:post= assertions in your code.

** Source

   - http://swannodette.github.io/2015/01/09/life-with-dynamic-typing/

** See also (generated)

   - [[file:../decks/clojure.org]]
   - [[file:20200430141609-david_nolen.org]]
   - [[file:20200430154647-shadow_cljs.org]]
   - [[file:20200430155438-mastering_clojure_macro.org]]
   - [[file:20200430155637-applied_clojure.org]]
   - [[file:20200430160432-clojure_for_the_brave_and_the_true.org]]
   - [[file:20200430235013-specs.org]]

