:PROPERTIES:
:ID:       bca207fc-25d3-45ff-a05f-8da06210c660
:ROAM_ALIASES: life-dynamic-type
:END:
#+TITLE: Life In Dynamic Typing
#+OPTIONS: toc:nil
#+filetags: :dynamic_typing:test:clj:david_nolen:cljs:

* Life In Dynamic Typing

  - tags :: [[id:9336fa0f-85f3-4943-b374-6ca2f01ee0f8][Clojure]]

  In dynamic typed language, assertions are used often to check assumption of
  your input data. In Clojure the =:pre= and =:post= conditions can be used
  effectively to fill this purpose.

  #+BEGIN_SRC clojure
     (defn f [x]
       {:pre [(integer? x)]
        :post string?}
       (str x))
  #+END_SRC

  ={:elide-asserts true}= in production build compiler options to remove =:pre=
  and =:post= assertions in your code.

** Source

   - http://swannodette.github.io/2015/01/09/life-with-dynamic-typing/


** See also (generated)

   - [[file:../decks/clojure.org][Clojure]]
   - [[file:20200430141609-david_nolen.org][David Nolen]]
   - [[file:20200430154647-shadow_cljs.org][shadow-cljs]]

