#+TITLE: Web App Testing
#+OPTIONS: toc:nil
#+ROAM_ALIAS: webapp-testing
#+ROAM_TAGS: webapp-testing cljs shadow-cljs
#+DATE: 2021-01-31

* Webapp Testing

** Strategies

   - Pure functions, use generative testing and test cards, these are easy to
     write, but requires careful design from the author. At best, pure
     functions should be written in cljc, as they could be run in jvm.
   - Devcards or storybook offers visual unit tests
   - E2E testing leverages on javascript infrastructure. See taiko, cypress.
   - Generative testing and another choice would be to record all the events
     the states and tests and leverage on google chrome protocols to listen for
     errors.

** Snooping API Calls

   - Use [[https://mitmproxy.org][mitmproxy]] to spy on your API calls from your devices.
   - Use ifconfig to check your machines IPs.

** Chrome Devtools Protocol

You must lunch a browser with remote debugging port

#+begin_src shell
  google-chrome-stable --remote-debugging-port=9222 --user-data-dir=remote-profile
#+end_src

Using [[https://github.com/tatut/clj-chrome-devtools][clj-chrome-devtools]], you can listen to =events= from the browser.

#+begin_src clojure
  (ns user
    (:require
     [clojure.core.async :as a]
     [clj-chrome-devtools.commands.log :as cdp-log]
     [clj-chrome-devtools.commands.runtime :as runtime]
     [clj-chrome-devtools.core :refer (connect)]
     [clj-chrome-devtools.events :refer (listen)]))

  (def c (connect "localhost" 9222))
  (def chan-console (listen c :runtime :console-api-called))

  (a/go-loop []
    (let [x (a/<! chan-console)]
      (when x
        (println x)
        (recur))))

  (runtime/evaluate c {:expression "3 + 5"}) ;; you can evaluate expressions
  (runtime/evaluate c {:expression "1/0"}) ;; you should see an error
#+end_src


** Links
   - https://juxt.pro/blog/cljs-apps
   - https://github.com/oliyh/kamera
   - https://github.com/tatut/clj-chrome-devtools


** See also (generated)

   - 

