{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"rationale/","text":"Why? \u00b6 Using org-roam , mkdocs-material , I can generate a website to search for my idea, using the zettelkasten methods. Org mode is great for authoring, but I do prefer some nice font and a good navigation, search navigation. mkdocs-material offered a great compromise and orgmk allowed me to have a command line conversion. Clojure allowed to handle all the files systems, interaction with the sqlite database, the parsing and the concurrency. I came up with my own set up, cards for writing anything that goes into my minds, links them and decks for writing summaries. Blog posts are a place where I can write some ideas and opinions to share them. Technical challenge \u00b6 I created some functions to leverage the org-roam.db sqlite data base. With my own starting template, the code reads the tags and the links, such that automatic see also are created at the end of each page. See README on how to use it the library. Small index for quick accessa \u00b6 Programming \u00b6 clj , core.async , Gratitude \u00b6 Gratitudes and Journaling See also (generated) \u00b6 Clojure core.async First blog ticket Gratitudes and Journaling org mode Readings","title":"Why?"},{"location":"rationale/#why","text":"Using org-roam , mkdocs-material , I can generate a website to search for my idea, using the zettelkasten methods. Org mode is great for authoring, but I do prefer some nice font and a good navigation, search navigation. mkdocs-material offered a great compromise and orgmk allowed me to have a command line conversion. Clojure allowed to handle all the files systems, interaction with the sqlite database, the parsing and the concurrency. I came up with my own set up, cards for writing anything that goes into my minds, links them and decks for writing summaries. Blog posts are a place where I can write some ideas and opinions to share them.","title":"Why?"},{"location":"rationale/#technical-challenge","text":"I created some functions to leverage the org-roam.db sqlite data base. With my own starting template, the code reads the tags and the links, such that automatic see also are created at the end of each page. See README on how to use it the library.","title":"Technical challenge"},{"location":"rationale/#small-index-for-quick-accessa","text":"","title":"Small index for quick accessa"},{"location":"rationale/#programming","text":"clj , core.async ,","title":"Programming"},{"location":"rationale/#gratitude","text":"Gratitudes and Journaling","title":"Gratitude"},{"location":"rationale/#see-also-generated","text":"Clojure core.async First blog ticket Gratitudes and Journaling org mode Readings","title":"See also (generated)"},{"location":"todo/","text":"TOOD List \u00b6 This Todo file is a simple example of what I still have to learn or do. These are the goals I would like to reach or interest me. Highly important \u00b6 Goals \u00b6 specs, core async, datomic, testing. Webworkers and websockets. GPU computing GraphQL Spark Kafka Kubernetes, container technology. Learn about databases (postgres, elastic search and datomic). TODO Read Advanced Data Analysis from an elementary point of view \u00b6 Advanced data analysis from an elementary point of view Multipass and Ansible \u00b6 Use multipass and Ansible to simulate networks and kubernetes Learn CSS \u00b6 Write a summary (check create of Bulma) garden-cljs. Leverage TAGS \u00b6 Use #+TAGS options of orgs for generating automatically see also and tags field. Tags \u00b6 tags: TODO goals core.async specs goals See also (generated) \u00b6 Applied Clojure Clojure for the brave and the true core.async Goals specs","title":"TOOD List"},{"location":"todo/#tood-list","text":"This Todo file is a simple example of what I still have to learn or do. These are the goals I would like to reach or interest me.","title":"TOOD List"},{"location":"todo/#highly-important","text":"","title":"Highly important"},{"location":"todo/#goals","text":"specs, core async, datomic, testing. Webworkers and websockets. GPU computing GraphQL Spark Kafka Kubernetes, container technology. Learn about databases (postgres, elastic search and datomic).","title":"Goals"},{"location":"todo/#todo-read-advanced-data-analysis-from-an-elementary-point-of-view","text":"Advanced data analysis from an elementary point of view","title":"TODO Read Advanced Data Analysis from an elementary point of view"},{"location":"todo/#multipass-and-ansible","text":"Use multipass and Ansible to simulate networks and kubernetes","title":"Multipass and Ansible"},{"location":"todo/#learn-css","text":"Write a summary (check create of Bulma) garden-cljs.","title":"Learn CSS"},{"location":"todo/#leverage-tags","text":"Use #+TAGS options of orgs for generating automatically see also and tags field.","title":"Leverage TAGS"},{"location":"todo/#tags","text":"tags: TODO goals core.async specs goals","title":"Tags"},{"location":"todo/#see-also-generated","text":"Applied Clojure Clojure for the brave and the true core.async Goals specs","title":"See also (generated)"},{"location":"blog/20200502171331-first_blog_ticket/","text":"First blog ticket \u00b6 Voil\u00e0! The start of a new blog! Probably like all blogs, this one will remain probably empty, without a lot of content. I just created this website to gather my notes and find a system that can make leverage of all the ideas. I think the zettelkasten method is interesting and I decided to try it. Please read the rationale for more details!","title":"First blog ticket"},{"location":"blog/20200502171331-first_blog_ticket/#first-blog-ticket","text":"Voil\u00e0! The start of a new blog! Probably like all blogs, this one will remain probably empty, without a lot of content. I just created this website to gather my notes and find a system that can make leverage of all the ideas. I think the zettelkasten method is interesting and I decided to try it. Please read the rationale for more details!","title":"First blog ticket"},{"location":"cards/20200430141226-life_in_dynamic_typing/","text":"Life In Dynamic Typing \u00b6 tags: Clojure In dynamic typed language, assertions are used often to check assumption of your input data. In Clojure the :pre and :post conditions can be used effectively to fill this purpose. ( defn f [ x ] { :pre [( integer? x )] :post string? } ( str x )) {:elide-asserts true} in production build compiler options to remove :pre and :post assertions in your code. See also (generated) \u00b6 Applied Clojure Clojure Clojure for the brave and the true David Nolen Mastering Clojure Macro specs","title":"Life In Dynamic Typing"},{"location":"cards/20200430141226-life_in_dynamic_typing/#life-in-dynamic-typing","text":"tags: Clojure In dynamic typed language, assertions are used often to check assumption of your input data. In Clojure the :pre and :post conditions can be used effectively to fill this purpose. ( defn f [ x ] { :pre [( integer? x )] :post string? } ( str x )) {:elide-asserts true} in production build compiler options to remove :pre and :post assertions in your code.","title":"Life In Dynamic Typing"},{"location":"cards/20200430141226-life_in_dynamic_typing/#see-also-generated","text":"Applied Clojure Clojure Clojure for the brave and the true David Nolen Mastering Clojure Macro specs","title":"See also (generated)"},{"location":"cards/20200430141609-david_nolen/","text":"David Nolen \u00b6 tags: Clojure ClojureScript (cljs) lead developer See also (generated) \u00b6 Applied Clojure Clojure Clojure for the brave and the true Life In Dynamic Typing Mastering Clojure Macro shadow-cljs","title":"David Nolen"},{"location":"cards/20200430141609-david_nolen/#david-nolen","text":"tags: Clojure ClojureScript (cljs) lead developer","title":"David Nolen"},{"location":"cards/20200430141609-david_nolen/#see-also-generated","text":"Applied Clojure Clojure Clojure for the brave and the true Life In Dynamic Typing Mastering Clojure Macro shadow-cljs","title":"See also (generated)"},{"location":"cards/20200430153912-ethz/","text":"ETHZ \u00b6 tags: studies statistics ethz Lectures \u00b6 DONE Projects [3/3] \u00b6 [X] Semester paper in economics : Public Employment [X] Write e-mail. [X] Decide subject and write about it. [X] Read papers [X] Do the regression [X] Semester paper in statistics: Missing data [X] Read introduction missing data. [X] Play with mi. [X] Use Digital Ocean API in R. [X] Master thesis [X] Webapp to teach math in clojure and middleman yaml DONE Causality [2/2] \u00b6 I had 5.75 (kind of deserved). PDAG: Partially means no directed cycle whereas DAG means no cycle at all. CPDAG (Markov Equivalent Graphs): for every directed node, all graph have the same edge. For undirected edges, there exist at least two graphs with opposite direction of the edge. Markov equivalent if they have the same skeleton and immoralities (v-struct). D-separation \\to \\to Blocked Reverse engineer the definition by thinking about the independence Markov blanket M M : for a target node Y Y , it is smallest set M M of nodes in the graphs that make Y Y independent of all the other nodes given M M . In DAG: for X X it contains its parents, its children and the parents of children. Causal minimality: P^X P^X is not markov to any proper subgraph of \\mathcal{G} \\mathcal{G} if and only if there are no useless edge. Markov: conditional d-sep \\Rightarrow \\Rightarrow independence, faithfulness is the converse. Local: X X is independent of any non descendent given its parnets. Adjustment formula (tautology): the conditional probability given the parents remains the same under the interventions. The goal adjustment set: evaluate interventions or causality with observational data. Valid adjustment set Z Z : p_{\\mathcal{S}, do(X=x)}(y) = \\sum_{z \\in Z} p_{\\mathcal{S}}(y \\vert X=x, z) p(z) p_{\\mathcal{S}, do(X=x)}(y) = \\sum_{z \\in Z} p_{\\mathcal{S}}(y \\vert X=x, z) p(z) for y y not in the parent of x x and x, y \\notin Z x, y \\notin Z . Backdoor criterion: S S blocks all paths from X X to Y Y that come \\emph{into} X X (backward path) and S S contains no descendant of X X . DONE QRM [3/3] \u00b6 <2015-08-18 Tue> Know the main theorems by heart: Fisher-Tippet, Pickands-Balkema-de Hann, Sklar. 5.5/6 [X] Read slides [X] Learn slides by heart [X] Do past exams DONE Multivariate Statistics [2/2] \u00b6 I had 4.5/6 (which was not deserved at all). [X] Do exercises [X] Serie 1 [X] Serie 2 [X] Serie 3 [X] Serie 4 [X] Serie 5 [X] Read scripts DONE Computational Statistics, finish the series [2/2] \u00b6 <2015-08-18 Tue> I got 6 (was a little bit easy, thanks to emacs and R-help). [X] Do Series [X] Read script DONE Economics Cycle [2/2] \u00b6 <2015-06-09 Tue> I had 4.75/6 at the exam. [X] Read scripts [X] Do Exercise See also (generated) \u00b6 Python R CRAN","title":"ETHZ"},{"location":"cards/20200430153912-ethz/#ethz","text":"tags: studies statistics ethz","title":"ETHZ"},{"location":"cards/20200430153912-ethz/#lectures","text":"","title":"Lectures"},{"location":"cards/20200430153912-ethz/#done-projects-33","text":"[X] Semester paper in economics : Public Employment [X] Write e-mail. [X] Decide subject and write about it. [X] Read papers [X] Do the regression [X] Semester paper in statistics: Missing data [X] Read introduction missing data. [X] Play with mi. [X] Use Digital Ocean API in R. [X] Master thesis [X] Webapp to teach math in clojure and middleman yaml","title":"DONE Projects [3/3]"},{"location":"cards/20200430153912-ethz/#done-causality-22","text":"I had 5.75 (kind of deserved). PDAG: Partially means no directed cycle whereas DAG means no cycle at all. CPDAG (Markov Equivalent Graphs): for every directed node, all graph have the same edge. For undirected edges, there exist at least two graphs with opposite direction of the edge. Markov equivalent if they have the same skeleton and immoralities (v-struct). D-separation \\to \\to Blocked Reverse engineer the definition by thinking about the independence Markov blanket M M : for a target node Y Y , it is smallest set M M of nodes in the graphs that make Y Y independent of all the other nodes given M M . In DAG: for X X it contains its parents, its children and the parents of children. Causal minimality: P^X P^X is not markov to any proper subgraph of \\mathcal{G} \\mathcal{G} if and only if there are no useless edge. Markov: conditional d-sep \\Rightarrow \\Rightarrow independence, faithfulness is the converse. Local: X X is independent of any non descendent given its parnets. Adjustment formula (tautology): the conditional probability given the parents remains the same under the interventions. The goal adjustment set: evaluate interventions or causality with observational data. Valid adjustment set Z Z : p_{\\mathcal{S}, do(X=x)}(y) = \\sum_{z \\in Z} p_{\\mathcal{S}}(y \\vert X=x, z) p(z) p_{\\mathcal{S}, do(X=x)}(y) = \\sum_{z \\in Z} p_{\\mathcal{S}}(y \\vert X=x, z) p(z) for y y not in the parent of x x and x, y \\notin Z x, y \\notin Z . Backdoor criterion: S S blocks all paths from X X to Y Y that come \\emph{into} X X (backward path) and S S contains no descendant of X X .","title":"DONE Causality [2/2]"},{"location":"cards/20200430153912-ethz/#done-qrm-33","text":"<2015-08-18 Tue> Know the main theorems by heart: Fisher-Tippet, Pickands-Balkema-de Hann, Sklar. 5.5/6 [X] Read slides [X] Learn slides by heart [X] Do past exams","title":"DONE QRM [3/3]"},{"location":"cards/20200430153912-ethz/#done-multivariate-statistics-22","text":"I had 4.5/6 (which was not deserved at all). [X] Do exercises [X] Serie 1 [X] Serie 2 [X] Serie 3 [X] Serie 4 [X] Serie 5 [X] Read scripts","title":"DONE Multivariate Statistics [2/2]"},{"location":"cards/20200430153912-ethz/#done-computational-statistics-finish-the-series-22","text":"<2015-08-18 Tue> I got 6 (was a little bit easy, thanks to emacs and R-help). [X] Do Series [X] Read script","title":"DONE Computational Statistics, finish the series [2/2]"},{"location":"cards/20200430153912-ethz/#done-economics-cycle-22","text":"<2015-06-09 Tue> I had 4.75/6 at the exam. [X] Read scripts [X] Do Exercise","title":"DONE Economics Cycle [2/2]"},{"location":"cards/20200430153912-ethz/#see-also-generated","text":"Python R CRAN","title":"See also (generated)"},{"location":"cards/20200430154352-cli_arguments/","text":"CLI Arguments \u00b6 Check how to use cli arguments for release scripts. ( require ' [ clojure.tools.cli :refer [ parse-opts ]]) ( def cli-options ;; An option with a required argument [[ \"-p\" \"--port PORT\" \"Port number\" :default 80 :parse-fn # ( Integer/parseInt % ) :validate [ # ( < 0 % 0 x10000 ) \"Must be a number between 0 and 65536\" ]] [ \"-h\" \"--help\" ]]) ( :options ( parse-opts *command-line-args* cli-options )) See also (generated) \u00b6 Applied Clojure Clojure Clojure for the brave and the true Mastering Clojure Macro Materiala Multiple Environment","title":"CLI Arguments"},{"location":"cards/20200430154352-cli_arguments/#cli-arguments","text":"Check how to use cli arguments for release scripts. ( require ' [ clojure.tools.cli :refer [ parse-opts ]]) ( def cli-options ;; An option with a required argument [[ \"-p\" \"--port PORT\" \"Port number\" :default 80 :parse-fn # ( Integer/parseInt % ) :validate [ # ( < 0 % 0 x10000 ) \"Must be a number between 0 and 65536\" ]] [ \"-h\" \"--help\" ]]) ( :options ( parse-opts *command-line-args* cli-options ))","title":"CLI Arguments"},{"location":"cards/20200430154352-cli_arguments/#see-also-generated","text":"Applied Clojure Clojure Clojure for the brave and the true Mastering Clojure Macro Materiala Multiple Environment","title":"See also (generated)"},{"location":"cards/20200430154528-multiple_environment/","text":"Multiple environments \u00b6 We can have different class paths for configuration with clj and alias in deps.edn to manage them. Proxies: you add in ~.shadow-cljs/config.edn or in the config file { :maven { :proxy { :host \"proxy.host.com\" :port 8080 }}} tags: clj build See also (generated) \u00b6 Applied Clojure CLI Arguments Clojure Clojure for the brave and the true General Skills Mastering Clojure Macro Materiala","title":"Multiple environments"},{"location":"cards/20200430154528-multiple_environment/#multiple-environments","text":"We can have different class paths for configuration with clj and alias in deps.edn to manage them. Proxies: you add in ~.shadow-cljs/config.edn or in the config file { :maven { :proxy { :host \"proxy.host.com\" :port 8080 }}} tags: clj build","title":"Multiple environments"},{"location":"cards/20200430154528-multiple_environment/#see-also-generated","text":"Applied Clojure CLI Arguments Clojure Clojure for the brave and the true General Skills Mastering Clojure Macro Materiala","title":"See also (generated)"},{"location":"cards/20200430154647-shadow_cljs/","text":"shadow-cljs \u00b6 NGINX Configuration for developping locally \u00b6 server { listen 80 default_server; listen [::]:80 default_server; root /var/www/html; server_name _; location / { proxy_pass http://localhost:8080/; try_files $uri $uri/a 404; } location /shadow-cljs/ { # upgrade to websocket proxy_pass http://localhost:9630/; proxy_http_version 1.1; proxy_set_header Upgrade $http_upgrade; proxy_set_header Connection \"Upgrade\"; proxy_set_header Host $host; } } Links \u00b6 shadow-cljs cljs See also (generated) \u00b6 Clojure David Nolen","title":"shadow-cljs"},{"location":"cards/20200430154647-shadow_cljs/#shadow-cljs","text":"","title":"shadow-cljs"},{"location":"cards/20200430154647-shadow_cljs/#nginx-configuration-for-developping-locally","text":"server { listen 80 default_server; listen [::]:80 default_server; root /var/www/html; server_name _; location / { proxy_pass http://localhost:8080/; try_files $uri $uri/a 404; } location /shadow-cljs/ { # upgrade to websocket proxy_pass http://localhost:9630/; proxy_http_version 1.1; proxy_set_header Upgrade $http_upgrade; proxy_set_header Connection \"Upgrade\"; proxy_set_header Host $host; } }","title":"NGINX Configuration for developping locally"},{"location":"cards/20200430154647-shadow_cljs/#links","text":"shadow-cljs cljs","title":"Links"},{"location":"cards/20200430154647-shadow_cljs/#see-also-generated","text":"Clojure David Nolen","title":"See also (generated)"},{"location":"cards/20200430155438-mastering_clojure_macro/","text":"Mastering Clojure Macro \u00b6 Macro is about manipulating the arguments of your functions before they get evaluated. We should think about templating when thinking about macros. The macro returns a S-Expression which should be valid Clojure code. Use ` for namespace quoting everything after the backquote (usually a list). Unquote is done through ~ . Unquote splicing ~@ allows to remove the parenthesis in a list and put them at the same level as the parent S-Expression. For example the following `(1 2 ~@(3 4) 5)` returns (1 2 3 4 5) . Whenever we need to bind a symbol in a macro (e.g fn and let ), the argument should be gensym, or symbol appended of a # , e.g x# . &form [the calling expression] and &env [the binding environment] are special values only available in macros. Disadvantage with macros. Macros are not values (as they are not functions). So we can\u2019t use map or any other function on them. Macros can be contagious as they can leak force your user to also write macros to use your library. They can be tough to get right (mainly because of side effect and computation time). We should avoid doing a mess in our user namespace whenever writing macros. Macros are useful to evaluate code in Context. When using dynamic binding, ( declare ^ :dynamic *radius* ) ( defn circle-area [] ( * Math/PI ( * *radius* *radius* ))) ( binding [ *radius* 10 ] ( circle-area )) it can be useful to abstract the binding step with a macro. Most common bindings are for *out* . In general, we should have the core of the manipulation of a macro written in a function, and have the smallest possible amount of lines of code into a the macro. ( defn with-out-file-fn [ file body-fn ] ( with-open [ writer ( clojure.java.io/writer file :append true )] ( binding [ *out* writer ] ( body-fn )))) ( defn with-out-file [ file & body ] ` ( with-out-file-fn ~ file ( fn [] ~@ body ))) Macro can also decide how we evaluate (or not) the input, e.g. comment . A cool trick for a function that should be executed only once ( let [ x :a f ( ^ :once fn* [] ( println x ))] ( f ) ;; prints :a ( f )) ;; prints nil Macros can also rescuing errors and clean up resources. The main point is macros allow to eliminate noisy details of cleaning up an open resource, rescuing errors, or setting up dynamic bindings or other context for evaluation. It allows to abstract away the contextual details and core operations can be clarified to make the purpose of the code more obvious. - Optimization. Before optimizing, we should know how to benchmark. criterium.core is a nice solution for that. Macros can let write type hinting without the users being noticed and as the computation is done at compile time, they allow optimization of operations or functions which does not depend on user input. - Macro can build apis that say what they mean. It allows to avoid unnecessary intermediary steps for the users to know, especially ones that require forms that are not essentials to the API. For example, building resources or calling functions. In this case, we should try to have as much operations in functions, to avoid bugs but also to offer the choice to the user to call functions (which are values) or macros. - As macro execute the logic of its body before executing its arguments, we can bend the control flow of our code. The lowest level of looping in Clojure is the loop/recur construction and most control flow in Clojure are derived from this. This is a special case of creating languages features. Links \u00b6 Mastering Clojure Macros tags: clj See also (generated) \u00b6 Applied Clojure CLI Arguments Clojure Clojure for the brave and the true core.async David Nolen Life In Dynamic Typing Multiple Environment Simple Made Easy specs","title":"Mastering Clojure Macro"},{"location":"cards/20200430155438-mastering_clojure_macro/#mastering-clojure-macro","text":"Macro is about manipulating the arguments of your functions before they get evaluated. We should think about templating when thinking about macros. The macro returns a S-Expression which should be valid Clojure code. Use ` for namespace quoting everything after the backquote (usually a list). Unquote is done through ~ . Unquote splicing ~@ allows to remove the parenthesis in a list and put them at the same level as the parent S-Expression. For example the following `(1 2 ~@(3 4) 5)` returns (1 2 3 4 5) . Whenever we need to bind a symbol in a macro (e.g fn and let ), the argument should be gensym, or symbol appended of a # , e.g x# . &form [the calling expression] and &env [the binding environment] are special values only available in macros. Disadvantage with macros. Macros are not values (as they are not functions). So we can\u2019t use map or any other function on them. Macros can be contagious as they can leak force your user to also write macros to use your library. They can be tough to get right (mainly because of side effect and computation time). We should avoid doing a mess in our user namespace whenever writing macros. Macros are useful to evaluate code in Context. When using dynamic binding, ( declare ^ :dynamic *radius* ) ( defn circle-area [] ( * Math/PI ( * *radius* *radius* ))) ( binding [ *radius* 10 ] ( circle-area )) it can be useful to abstract the binding step with a macro. Most common bindings are for *out* . In general, we should have the core of the manipulation of a macro written in a function, and have the smallest possible amount of lines of code into a the macro. ( defn with-out-file-fn [ file body-fn ] ( with-open [ writer ( clojure.java.io/writer file :append true )] ( binding [ *out* writer ] ( body-fn )))) ( defn with-out-file [ file & body ] ` ( with-out-file-fn ~ file ( fn [] ~@ body ))) Macro can also decide how we evaluate (or not) the input, e.g. comment . A cool trick for a function that should be executed only once ( let [ x :a f ( ^ :once fn* [] ( println x ))] ( f ) ;; prints :a ( f )) ;; prints nil Macros can also rescuing errors and clean up resources. The main point is macros allow to eliminate noisy details of cleaning up an open resource, rescuing errors, or setting up dynamic bindings or other context for evaluation. It allows to abstract away the contextual details and core operations can be clarified to make the purpose of the code more obvious. - Optimization. Before optimizing, we should know how to benchmark. criterium.core is a nice solution for that. Macros can let write type hinting without the users being noticed and as the computation is done at compile time, they allow optimization of operations or functions which does not depend on user input. - Macro can build apis that say what they mean. It allows to avoid unnecessary intermediary steps for the users to know, especially ones that require forms that are not essentials to the API. For example, building resources or calling functions. In this case, we should try to have as much operations in functions, to avoid bugs but also to offer the choice to the user to call functions (which are values) or macros. - As macro execute the logic of its body before executing its arguments, we can bend the control flow of our code. The lowest level of looping in Clojure is the loop/recur construction and most control flow in Clojure are derived from this. This is a special case of creating languages features.","title":"Mastering Clojure Macro"},{"location":"cards/20200430155438-mastering_clojure_macro/#links","text":"Mastering Clojure Macros tags: clj","title":"Links"},{"location":"cards/20200430155438-mastering_clojure_macro/#see-also-generated","text":"Applied Clojure CLI Arguments Clojure Clojure for the brave and the true core.async David Nolen Life In Dynamic Typing Multiple Environment Simple Made Easy specs","title":"See also (generated)"},{"location":"cards/20200430155637-applied_clojure/","text":"Applied Clojure \u00b6 Collections \u00b6 List (adddition at the head), vectors (addition at the end) and queues (FIFO). ( def new-orders clojure.lang.PersistentQueue/EMPTY ) Use transient and persistent! if the transformation is local. The library medley from weavejester incorporate useful functions. Collection accessing: use keyword first (:key m) , or (m :key) if it is certain that m is a map, otherwise if both might be null use (get m k) . If possible avoid having a stack of left parentheses such as ((f) x) . Abuse of select-keys to subset a map. If performance is required, we can create custom collection by defining a type and implementing the protocol, a custom printing is possible. Use records and maps to describe your entities. Maps should be the default choice, unless you decide to use protocols and need performance for dispatch. Protocols and multimethods are the two ways for dispatching. Protocols are faster in Clojure, but multimethods are more flexible. Processing Sequential Data. \u00b6 We can use map , filter , reduce to process sequence of values, but it might not be efficient. Transducers are created to avoid the concretion of the data structure. A transducer (usually denoted by xf or xform ) is a function that transform a reducing function into an another reducing function. That is xf: f -> g where f and g have signature whatever, input -> whatever . Concrete example of reducing function are conj with whatever being a list, + (with whatever being a number, and input a number). See here for more details. The trick is you can define map, filter and other operations as reducing function (reducing function are used in reduce operations usually). It is important to note that reducing function can actually grow the whatever (see conj ). We create them by omitting the coll argument in the typical sequence functions, e.g. (map f) yields a transducer. Use the sequence function to realize the transducer. The following calls are equal ( = ( map # ( * 2 % ) ( range 10 )) ( sequence ( map # ( * 2 % )) ( range 10 ))) If we need eagerness we could use into ( into [] ( map # ( * 2 % )) ( range 10 )) The benefit of transducer is intermediate values are not allocated and there is a decoupling of the transformations with the reducer (reducing function and reducible collection). They are also polymorphic. We can compose transducers and reduction with transduce ( def moons-transform ( comp ( filter planet? ) ( map :moons ))) ( defn total-moons [ entities ] ( transduce moons-transform + 0 entities )) See understanding transducers for more details. Duplicate removal with distinct and dedupe (only remove subsequent duplicate and safer for large input). Use mapcat instead of (-> map flatten) . Reference, State and Mutation \u00b6 Identity and state are two distinct notions. An identity is a sequence of immutable values, and the state is the actual value of an identity at a certain point of time. The challenge is to always display a single valid value to all the observer at the same time. There are two types of successions (mutation): atomic and transactions. An atomic transaction only cares about the change happening to the identity itself and not about the coordination of other identity. Transactional ensure that either all changes or none are performed. There are two states: program and runtime states. Program state is concerned with mutation in the problem domain, whereas runtime facilitate the software\u2019s execution (e.g. connections to databases or network, config files). Runtime state is often unavoidable whereas program state should be minimized and access through API with curated methods rather than directly. For managing change, we should build just enough to ensure the application\u2019s needs are met. Every side effect and mutable reference slows you down. We should be responsible over our functions (make them pure) and make choices about what need to be managed. State is a series of snapshots of values (data) which allows to act responsibly when considering the presence of observers in other processes. In Clojure, observers have consistent set of values as of a particular instant thanks to Clojure\u2019s mutable references. Use your cores \u00b6 One of the problem is to send task of the main thread to be completed asynchronously and retrieve the result ( future and promise ). Tasks and workers for long lived task-oriented concurrency. We can also use reducers and core.async (with channels and go blocks ). For agents, use send for computational tasks and won\u2019t block for I/O and send-off for updates that might block for an arbitrary time (thread pool will grow accordingly). The advantage is agent can maintain state compared to future . Use deref or @ for retrieving back the value of a future or promise . Promise are used to returns several values from a future block. Use realized? to check if a promise is available, otherwise it will block. The deref function with an additional argument can force timeout. Use Java queues and workers for task oriented programs. This is for coarse grained task parallelism. Queues , threads and executors are the tools from Java to perform a queue of incoming work or requests. For fine-grained parallelism The pmap function can be used for easy parallelism, but the overhead might be consequential. The clojure.core.reducer library is the solution for parallelism [fine-grained operations and memory efficient]. A reducer is reducible collection combined with a reducing function . fold is used to perform the reduction [only vectors and maps can be folded in parallel, but the serial version can be faster thanks to avoiding intermediary values]. A reducer splits the data into partition, reduce the elements and then combine them. The reduce and the combine functions can hence be different. Concurrency (design the program as a set of concurrent threads of execution) we can use core.async . Channels come in unbuffered, fixed buffered, dropping (discard new data) and sliding buffer (discard old data). Creating a channel is done with chan the function. nil can not be passed into channels (as it is the value for saying the channel is closed). The important operations are put and take . A full channel (once the buffer is complete) blocks a thread if no process other process is the other end of the channel to take the value sent by put . Backpressure is the efffect that fixed sized buffers creates by making the producers block when trying to add to a full queue. Traditionally channels are used in go block . In the Communicating Sequential Processes (CSP), process belongs to a thread pool and are parked when not blocked by a channel operation ( >! or <! ). Go blocks are great for building pipelines of data transformation. core.async/pipelines gives up the raw performance of fine-grained data parallelism but yield a more flexible architecture. The function moves the value from input to output channel with parallel transducer execution. Next step is to break a growing system into pieces using concurrency. Designing components \u00b6 Use of channels, better to receive and provide channels for interface. In core.async , a single go block is to call the body of the go block once asynchronously, while go-loop is intended for looping, unless we close the channel. go blocks return a channel, which can be used for pedestal. A good design is to split an API layer and implementation layer with a record. As for core.async , there are three additional concept for channels that are useful: pipeline, fan-in and fan-out. In a system, pipelines link an output channel to an input channel (acting like as a conveyor belt) and can possibly transform its input values with a transducer (async, sync, blocking). The pipe function should be used when no transformation. Fan-in channels gather the input of several channels and provide a single output channel. merge is a simple way to merge all the incoming channels into a single output channels, but it can\u2019t be modified after creation. The mix (for audio mix) function with its functions admix/unmix allows channel to participate in the mix. Users can toggle options for each input channel: :pause (no consumption nor inclusion in output channel), :mute (consumption but no inclusion), :solo ( if true, only solo-ed channels in output channel mix, :pause and :mute ignored if this is the case). Fan-out have three ways: mult , pub/sub , split . The mult abstraction is multiply traffic from the input channel into multiple output channels. Output channels (with different blocking policy) can participate in the connection with tap/untap (if a tap is closed, it is removed from the mult ). All the receiving channels must accept a value from the mult before the mult can move on to the next value. This is where alternative buffering strategy are useful. The pub/sub allows to distribute the traffic through a partition function and subscribers can inform to which partition value they want to lisen to. split divides the traffic two channels based on a truthiness of a predicate. split is actually a pub/sub with a partition function providing only truthy/falsy . Compose Your Application \u00b6 Taking things apart: usualy some portion of the code will work on the same data, or have the data has a common scope or lifetime, likelihehood of change from external requirement is similar are resource needed. If code is reusable when configured differently in more than one context, then it is a component. Component should communicate with channels, but in order to set up the system correctly, we need something to orchestrate it. Several library exist, the book recommends Component , but it has been super-seeded by integrant . An example can be found here reitit/integrant . Environment variable also should exist with different settings. The solution in the book are a bit old. Environ still seems to be good on clojure (jvm). Testing \u00b6 There are three ways to create tests in clojure: repl, example based, generative testing (properties check). With REPL driven development, the example used for development are stored in a file (these are candidates for examples). For example based, there is the expectations library and the following snippets ( deftest test-range-are ( testing \"Testing range(endIndex)\" ( are [ expected endIndexf ( = expected ( range endIndex )) ' ( 0 1 2 3 4 ) 5 ' () 0 ]))) Generative testing using ( ns generative-testing.core ( :require [ clojure.test.check :as tc ] [ clojure.test.check.generators :as gen ] [ clojure.test.check.properties :as prop ])) I think nowadays we would use spec for it. We are looking for invariants \u2013 properties that are always true. [\u2026] mathematical laws, relationships between inputs and outputs, round-trip or complementing functions, and comparing action effects. Properties like identity, associativity, commutativity and idempotency are an excellent place to start. Invariants are important because they reduce the number of case your code must consider. Thinking in Clojure \u00b6 Make Reasoned Choices: always compare trade-off of solutions (benefits and costs). Think first, then do . Careful treatment of decisions and weighed trade-off to fully understand the consequences. Be Reasonable: code with clearly expressed intent, limited side effects, neatly separated concerns, and unambiguous naming. Simple. Keep It Simple: Keep distinct concern as distinct as possible and avoid entangling concepts with other concepts. The code can be reasoned about, test and implemented without any incidental complexity. Entities are simplest when distinct and composable. Domain functions avoid complexity by avoiding side effects and concerning themselves only with entities in their domain. Build Just Enough: Keep complexity at bay and avoid overengineering. Compose: compose component, and evaluate your code composability by using it from another component. Results will be a set of tidy interfaces to distinct independent subsystems with clear communication channels. With a stable interface, a component can grow easily and adapt quickly. Be Precise: avoid ambiguity and communicate clearly with others and your future self. Entities typify one concept. Functions effect a single transformation. Queries ask simple questions and return unambiguous results. Use What Works: look for working libraries, solution in other languages or papers. Link \u00b6 Clojure Applied tags: clj core-async design See also (generated) \u00b6 CLI Arguments Clojure Clojure for the brave and the true core.async David Nolen Design Life In Dynamic Typing Mastering Clojure Macro Multiple Environment Simple Made Easy specs TODO","title":"Applied Clojure"},{"location":"cards/20200430155637-applied_clojure/#applied-clojure","text":"","title":"Applied Clojure"},{"location":"cards/20200430155637-applied_clojure/#collections","text":"List (adddition at the head), vectors (addition at the end) and queues (FIFO). ( def new-orders clojure.lang.PersistentQueue/EMPTY ) Use transient and persistent! if the transformation is local. The library medley from weavejester incorporate useful functions. Collection accessing: use keyword first (:key m) , or (m :key) if it is certain that m is a map, otherwise if both might be null use (get m k) . If possible avoid having a stack of left parentheses such as ((f) x) . Abuse of select-keys to subset a map. If performance is required, we can create custom collection by defining a type and implementing the protocol, a custom printing is possible. Use records and maps to describe your entities. Maps should be the default choice, unless you decide to use protocols and need performance for dispatch. Protocols and multimethods are the two ways for dispatching. Protocols are faster in Clojure, but multimethods are more flexible.","title":"Collections"},{"location":"cards/20200430155637-applied_clojure/#processing-sequential-data","text":"We can use map , filter , reduce to process sequence of values, but it might not be efficient. Transducers are created to avoid the concretion of the data structure. A transducer (usually denoted by xf or xform ) is a function that transform a reducing function into an another reducing function. That is xf: f -> g where f and g have signature whatever, input -> whatever . Concrete example of reducing function are conj with whatever being a list, + (with whatever being a number, and input a number). See here for more details. The trick is you can define map, filter and other operations as reducing function (reducing function are used in reduce operations usually). It is important to note that reducing function can actually grow the whatever (see conj ). We create them by omitting the coll argument in the typical sequence functions, e.g. (map f) yields a transducer. Use the sequence function to realize the transducer. The following calls are equal ( = ( map # ( * 2 % ) ( range 10 )) ( sequence ( map # ( * 2 % )) ( range 10 ))) If we need eagerness we could use into ( into [] ( map # ( * 2 % )) ( range 10 )) The benefit of transducer is intermediate values are not allocated and there is a decoupling of the transformations with the reducer (reducing function and reducible collection). They are also polymorphic. We can compose transducers and reduction with transduce ( def moons-transform ( comp ( filter planet? ) ( map :moons ))) ( defn total-moons [ entities ] ( transduce moons-transform + 0 entities )) See understanding transducers for more details. Duplicate removal with distinct and dedupe (only remove subsequent duplicate and safer for large input). Use mapcat instead of (-> map flatten) .","title":"Processing Sequential Data."},{"location":"cards/20200430155637-applied_clojure/#reference-state-and-mutation","text":"Identity and state are two distinct notions. An identity is a sequence of immutable values, and the state is the actual value of an identity at a certain point of time. The challenge is to always display a single valid value to all the observer at the same time. There are two types of successions (mutation): atomic and transactions. An atomic transaction only cares about the change happening to the identity itself and not about the coordination of other identity. Transactional ensure that either all changes or none are performed. There are two states: program and runtime states. Program state is concerned with mutation in the problem domain, whereas runtime facilitate the software\u2019s execution (e.g. connections to databases or network, config files). Runtime state is often unavoidable whereas program state should be minimized and access through API with curated methods rather than directly. For managing change, we should build just enough to ensure the application\u2019s needs are met. Every side effect and mutable reference slows you down. We should be responsible over our functions (make them pure) and make choices about what need to be managed. State is a series of snapshots of values (data) which allows to act responsibly when considering the presence of observers in other processes. In Clojure, observers have consistent set of values as of a particular instant thanks to Clojure\u2019s mutable references.","title":"Reference, State and Mutation"},{"location":"cards/20200430155637-applied_clojure/#use-your-cores","text":"One of the problem is to send task of the main thread to be completed asynchronously and retrieve the result ( future and promise ). Tasks and workers for long lived task-oriented concurrency. We can also use reducers and core.async (with channels and go blocks ). For agents, use send for computational tasks and won\u2019t block for I/O and send-off for updates that might block for an arbitrary time (thread pool will grow accordingly). The advantage is agent can maintain state compared to future . Use deref or @ for retrieving back the value of a future or promise . Promise are used to returns several values from a future block. Use realized? to check if a promise is available, otherwise it will block. The deref function with an additional argument can force timeout. Use Java queues and workers for task oriented programs. This is for coarse grained task parallelism. Queues , threads and executors are the tools from Java to perform a queue of incoming work or requests. For fine-grained parallelism The pmap function can be used for easy parallelism, but the overhead might be consequential. The clojure.core.reducer library is the solution for parallelism [fine-grained operations and memory efficient]. A reducer is reducible collection combined with a reducing function . fold is used to perform the reduction [only vectors and maps can be folded in parallel, but the serial version can be faster thanks to avoiding intermediary values]. A reducer splits the data into partition, reduce the elements and then combine them. The reduce and the combine functions can hence be different. Concurrency (design the program as a set of concurrent threads of execution) we can use core.async . Channels come in unbuffered, fixed buffered, dropping (discard new data) and sliding buffer (discard old data). Creating a channel is done with chan the function. nil can not be passed into channels (as it is the value for saying the channel is closed). The important operations are put and take . A full channel (once the buffer is complete) blocks a thread if no process other process is the other end of the channel to take the value sent by put . Backpressure is the efffect that fixed sized buffers creates by making the producers block when trying to add to a full queue. Traditionally channels are used in go block . In the Communicating Sequential Processes (CSP), process belongs to a thread pool and are parked when not blocked by a channel operation ( >! or <! ). Go blocks are great for building pipelines of data transformation. core.async/pipelines gives up the raw performance of fine-grained data parallelism but yield a more flexible architecture. The function moves the value from input to output channel with parallel transducer execution. Next step is to break a growing system into pieces using concurrency.","title":"Use your cores"},{"location":"cards/20200430155637-applied_clojure/#designing-components","text":"Use of channels, better to receive and provide channels for interface. In core.async , a single go block is to call the body of the go block once asynchronously, while go-loop is intended for looping, unless we close the channel. go blocks return a channel, which can be used for pedestal. A good design is to split an API layer and implementation layer with a record. As for core.async , there are three additional concept for channels that are useful: pipeline, fan-in and fan-out. In a system, pipelines link an output channel to an input channel (acting like as a conveyor belt) and can possibly transform its input values with a transducer (async, sync, blocking). The pipe function should be used when no transformation. Fan-in channels gather the input of several channels and provide a single output channel. merge is a simple way to merge all the incoming channels into a single output channels, but it can\u2019t be modified after creation. The mix (for audio mix) function with its functions admix/unmix allows channel to participate in the mix. Users can toggle options for each input channel: :pause (no consumption nor inclusion in output channel), :mute (consumption but no inclusion), :solo ( if true, only solo-ed channels in output channel mix, :pause and :mute ignored if this is the case). Fan-out have three ways: mult , pub/sub , split . The mult abstraction is multiply traffic from the input channel into multiple output channels. Output channels (with different blocking policy) can participate in the connection with tap/untap (if a tap is closed, it is removed from the mult ). All the receiving channels must accept a value from the mult before the mult can move on to the next value. This is where alternative buffering strategy are useful. The pub/sub allows to distribute the traffic through a partition function and subscribers can inform to which partition value they want to lisen to. split divides the traffic two channels based on a truthiness of a predicate. split is actually a pub/sub with a partition function providing only truthy/falsy .","title":"Designing components"},{"location":"cards/20200430155637-applied_clojure/#compose-your-application","text":"Taking things apart: usualy some portion of the code will work on the same data, or have the data has a common scope or lifetime, likelihehood of change from external requirement is similar are resource needed. If code is reusable when configured differently in more than one context, then it is a component. Component should communicate with channels, but in order to set up the system correctly, we need something to orchestrate it. Several library exist, the book recommends Component , but it has been super-seeded by integrant . An example can be found here reitit/integrant . Environment variable also should exist with different settings. The solution in the book are a bit old. Environ still seems to be good on clojure (jvm).","title":"Compose Your Application"},{"location":"cards/20200430155637-applied_clojure/#testing","text":"There are three ways to create tests in clojure: repl, example based, generative testing (properties check). With REPL driven development, the example used for development are stored in a file (these are candidates for examples). For example based, there is the expectations library and the following snippets ( deftest test-range-are ( testing \"Testing range(endIndex)\" ( are [ expected endIndexf ( = expected ( range endIndex )) ' ( 0 1 2 3 4 ) 5 ' () 0 ]))) Generative testing using ( ns generative-testing.core ( :require [ clojure.test.check :as tc ] [ clojure.test.check.generators :as gen ] [ clojure.test.check.properties :as prop ])) I think nowadays we would use spec for it. We are looking for invariants \u2013 properties that are always true. [\u2026] mathematical laws, relationships between inputs and outputs, round-trip or complementing functions, and comparing action effects. Properties like identity, associativity, commutativity and idempotency are an excellent place to start. Invariants are important because they reduce the number of case your code must consider.","title":"Testing"},{"location":"cards/20200430155637-applied_clojure/#thinking-in-clojure","text":"Make Reasoned Choices: always compare trade-off of solutions (benefits and costs). Think first, then do . Careful treatment of decisions and weighed trade-off to fully understand the consequences. Be Reasonable: code with clearly expressed intent, limited side effects, neatly separated concerns, and unambiguous naming. Simple. Keep It Simple: Keep distinct concern as distinct as possible and avoid entangling concepts with other concepts. The code can be reasoned about, test and implemented without any incidental complexity. Entities are simplest when distinct and composable. Domain functions avoid complexity by avoiding side effects and concerning themselves only with entities in their domain. Build Just Enough: Keep complexity at bay and avoid overengineering. Compose: compose component, and evaluate your code composability by using it from another component. Results will be a set of tidy interfaces to distinct independent subsystems with clear communication channels. With a stable interface, a component can grow easily and adapt quickly. Be Precise: avoid ambiguity and communicate clearly with others and your future self. Entities typify one concept. Functions effect a single transformation. Queries ask simple questions and return unambiguous results. Use What Works: look for working libraries, solution in other languages or papers.","title":"Thinking in Clojure"},{"location":"cards/20200430155637-applied_clojure/#link","text":"Clojure Applied tags: clj core-async design","title":"Link"},{"location":"cards/20200430155637-applied_clojure/#see-also-generated","text":"CLI Arguments Clojure Clojure for the brave and the true core.async David Nolen Design Life In Dynamic Typing Mastering Clojure Macro Multiple Environment Simple Made Easy specs TODO","title":"See also (generated)"},{"location":"cards/20200430155819-core_async/","text":"core.async \u00b6 tags: clojure asynchronous CSP Problems \u00b6 Function chains make poor machines Real world concurrency is exposed via callback API. core.async in Use \u00b6 Source: core.async in use Transducers are really important for using core.async. Use transducers as much as possible in channels and go block to avoid side effect. Make sure to return the channels. Disadvantage: async code pollutes the return type, problem with error handling, channels are IO and hence have side effects. It introduces non-determinism in the code. Don\u2019t use async, unless required. Pattern fetch and them conj all the result in a callback. A good api for library creators is to ask the user to take the result of the asynchronous code as a callback. Make a framework where the asynchronicity is set as an implemented detail. Remove it from the interface (user or API). You need to contains the asynchronicity and hide it from the business perspective. This yields, testable data, explicit data. Reifying is the act of taking virtual and making it concrete. Intangible to tangible. The interceptors ( enter , exit , on-error ). Dataflow and FRP. Nodes are connected via communication channels, each nodes takes and emits from on or more inputs/outputs, each node consists of a function that computes outputs ased on inputs. The advantage is that it Separates transformation from communication and connection. It is functionally pure, async code is removed from the user interface, connections are explicit, and any connections can be used. Actor, connections are implicit, sending message inside user code, opqare state hidden in loop local. Pattern in Pattern \u00b6 Keep user space code pure; Move the complexity of async out of the user space; Make dependencies/connections between modules/components explicit (the system can introspect itself). It increase leverage; Leverage this for easier testing; Use core.async to enable cleaner abstractions, not as aned in itself. Link \u00b6 Announcement Rich Hickey on core.async core.async in use See also (generated) \u00b6 Applied Clojure Clojure Clojure for the brave and the true Home for ideas for my Zettelkasten Mastering Clojure Macro TODO","title":"core.async"},{"location":"cards/20200430155819-core_async/#coreasync","text":"tags: clojure asynchronous CSP","title":"core.async"},{"location":"cards/20200430155819-core_async/#problems","text":"Function chains make poor machines Real world concurrency is exposed via callback API.","title":"Problems"},{"location":"cards/20200430155819-core_async/#coreasync-in-use","text":"Source: core.async in use Transducers are really important for using core.async. Use transducers as much as possible in channels and go block to avoid side effect. Make sure to return the channels. Disadvantage: async code pollutes the return type, problem with error handling, channels are IO and hence have side effects. It introduces non-determinism in the code. Don\u2019t use async, unless required. Pattern fetch and them conj all the result in a callback. A good api for library creators is to ask the user to take the result of the asynchronous code as a callback. Make a framework where the asynchronicity is set as an implemented detail. Remove it from the interface (user or API). You need to contains the asynchronicity and hide it from the business perspective. This yields, testable data, explicit data. Reifying is the act of taking virtual and making it concrete. Intangible to tangible. The interceptors ( enter , exit , on-error ). Dataflow and FRP. Nodes are connected via communication channels, each nodes takes and emits from on or more inputs/outputs, each node consists of a function that computes outputs ased on inputs. The advantage is that it Separates transformation from communication and connection. It is functionally pure, async code is removed from the user interface, connections are explicit, and any connections can be used. Actor, connections are implicit, sending message inside user code, opqare state hidden in loop local.","title":"core.async in Use"},{"location":"cards/20200430155819-core_async/#pattern-in-pattern","text":"Keep user space code pure; Move the complexity of async out of the user space; Make dependencies/connections between modules/components explicit (the system can introspect itself). It increase leverage; Leverage this for easier testing; Use core.async to enable cleaner abstractions, not as aned in itself.","title":"Pattern in Pattern"},{"location":"cards/20200430155819-core_async/#link","text":"Announcement Rich Hickey on core.async core.async in use","title":"Link"},{"location":"cards/20200430155819-core_async/#see-also-generated","text":"Applied Clojure Clojure Clojure for the brave and the true Home for ideas for my Zettelkasten Mastering Clojure Macro TODO","title":"See also (generated)"},{"location":"cards/20200430160432-clojure_for_the_brave_and_the_true/","text":"Clojure for the brave and the true \u00b6 Parallel demons :concurrency: \u00b6 Reference cell: Read and write a shared state. Mutual exclusion: Example with writing a log with several processes, e.g. concatenate \u201cab\u201d and \u201ccd\u201d in a file results in \u201cacbd\u201d. Deadlock: On a table, every one has to take the left and right stick and the same time. However, there is only one stick per person. Leading to a deadlock. Solutions to these are future (new thread), delay (like future but executed only at deref time), promise (empty memory location shared to all thread that will receive value only once with deliver ). The advantage is all the execution are cached. Note : deference is done with either the defer function or the @ sign in front of the variable. References type :concurrency:epochal_time_model: \u00b6 atom are identities that can be set and shared by multiple threads. They use a set and compare algorithm, i.e. the swap! function modifies the value of the atom variable only if its values did not change between the beginning and the end of the transaction. swap! and reset! are the main function to work with atoms. watch are function with four arguments: a key (a keyword for identifying the process calling the watcher), a reference variable being watched, the old-state, and the new state. ( defn f [ key watched old-state new-state ] nil ) A watcher function is attached to a reference type (e.g an atom) with the add-watch function having the following signature: ( def counter ( atom 0 )) ( add-watch counter :watching-counter watch-fn ) Validators are functions that can check if new states are valid. They take as argument the atom and return a boolean. They are added to the atom as follow ( defn bigger-than-1 [ x ] ( or ( > x 1 ) ( throw ( IllegalStateException. \"That's too small\" )))) ( def account ( atom 2 :validator bigger-than-1 )) ( swap! account inc ) ( swap! account - 10 ) ;; Throw an error ref type are the ACI in the ACID accronym (atomic, consistent and isolated) and use STM . It means that either the operations between two refs happened correctly, or the transaction is aborted. alter and dosync are the key functions. In a transaction (that is the body of dosync ), every ref keep their state to the transaction (invisible to outside threads) and when the transaction tries to commit, every ref checks if the value has been altered by other threads. If any of them has been change, then none of the ref are updated, and the transaction restart with the new value and commits only when the initial states has not been /alter/ed by other processes. commute also allow to change the state of a ref. However, at transaction time, if ref states have been altered, only the commute part is run again with the new states, which might lead to inconsistent state, but increased performance. ensure function protects refs from being modified by other transaction. This is helpful, when a transaction must modify only one refs, but the other related refs must not be altered by other transaction. 5. vars are associations between symbols and objects. ^:dynamic is a keyword in def to signal to clojure that a vars is dynamic. Varnames are enclosed around * (e.g. *user-email* ) to show to other programmers that the variable is dynamic. bindings is a dynamic let . Dynamic vars are often use to name a resource that one ore more functions target. set! allows to change the state of the dynamic vars. alter-var-root allows to rebind a immutable vars (which is unadvised), and with-redefs allows to create local binding for testing. 6. pmap and the following ppmap can be used to execute parallel task: ( defn ppmap \"Partitioned pmap, for grouping map ops together to make parallel overehead worthwile\" [ grain-size f & colls ] ( apply concat ( apply pmap ( fn [ & pgroups ] ( doall ( apply map f pgroups ))) ( map ( partial partition-all grain-size ) colls )))) core.async and channels :core_async: \u00b6 chan creates a channel. And channel communicate through messages . One can put and take message. Processes wait for completion of their message. Process: Wait and do nothing until successful completion of either put or take from a channel. After success of the operation, continue. go and their blocks ( go blocks ) runs separately on a concurrent thread. go creates a process (i.e. its go block), which runs a pool of threads equal two plus the number of machines cores (avoiding the overhead of creating threads). Each go block only live until it reach the ends of its body. <! and <!! are the take function. It listen to the channel and wait until an another process puts a value in the channel which the take function returns. >! and >!! are the put function which always return true. It provides a message to a channel and wait until the message to be taken by another process before releasing resources. The number of ! in the operation depends if one is inside a go block (one ! ) or not (two ! ). Blocking and parking waiting are key to understand the number of ! . Parking wait allows a thread to handle several process (and this is only possible in a go block ). When one of the process starts to wait, the thread put it aside and starts an another process until it starts to wait, and so on. Use poll! and offer! to have non blocking channel interactions in the REPL. Channel buffers are created as following: ( def buffer-size 2 ) ( def channel-buffer ( chan buffer-size )) This means we can create 2 values without waiting for a response. sliding-buffer (FIFO) and dropping-buffer (LIFO) can be used to discard channel message without blocking. 5. close! closes channel. A closed channel does not accept any puts anymore and after all the values have been retrieved, the subsequent takes return nil . 6. alts!! lets us use the result of the first successful channel operation among a collection of channel operations. The elegant solution with alts!! is one can define a timeout ( let [[ message channel ] ( alts!! [ c1 c2 ( timout 20 )])] ;; c1 and c2 are predefined channels. ( println message )) if the timeout is the first to finish than message is nil . See alt! macro as well. 7. Queues and pipelines (escaping the callback hell) are common patterns. Abstraction and polymorphism \u00b6 Multimethods ( defmulti method-name ( fn [ x ] ( :type x ))) ;; or simplty :type, can be more complicated as well ( defmethod method-name :hello [ x ] \"Hello\" ) ( defmethod method-name :good-bye [ x ] \"Good-bye\" ) ( defmethod method-name :default [ x ] \"I don't know you\" ) ( method-name { :type :hello }) ; => Hello ( method-name { :type :good-bye }) ; Good-bye ( method-name { :type :what? }) ; => I don't know you One can also create hierarchies with derive and namespace keywords. 2. A protocol allows to make dispatch by the type of the first argument and it is a collection of polymorphic operations (unlike multimethod which is just one function). Methods from protocols can not have a & rest argument. Key functions are defprotocol , extend-type , extend-protocol (for specifying for several type at once). - Caveat: methods from protocols are property of the namespace and not from the object. 3. Records are extension of hash-map . ( defrecord WereWolf [ name title ]) ( WereWolf. \"David\" \"Master\" ) ( ->WereWolf \"David\" \"Master\" ) ( map->WereWolf { :name \"David\" :title \"Master\" }) On has to use the :import: statement in the ns macro in order to import records. One can access field through the keyword or the dot . macro. ( .name ( WereWolf. \"David\" \"Master\" )) ; \"David\" ( :title ( WereWolf. \"David\" \"Master\" )) ; \"Master\" Any function on map works on record (although they do not retain their class if one dissoc or assoc them). Here is how one could extend a protocol. ( defprotocol WereCreature \"Awesom Were\" ( full-moon-behavior [ x ] \"Full-moon behavior\" )) ( defrecord WereWolf [ name title ] WereCreature ( full-moon-behavior [ x ] ( str name \" will kill everyone\" ))) ( full-moon-behavior ( WereWolf. \"David\" \"Master\" )) deftype , reify , proxy . reify is about implementing an anonymous protocol at runtime. Link \u00b6 Brave and the True See also (generated) \u00b6 Applied Clojure CLI Arguments Clojure core.async David Nolen Life In Dynamic Typing Mastering Clojure Macro Multiple Environment Simple Made Easy specs TODO","title":"Clojure for the brave and the true"},{"location":"cards/20200430160432-clojure_for_the_brave_and_the_true/#clojure-for-the-brave-and-the-true","text":"","title":"Clojure for the brave and the true"},{"location":"cards/20200430160432-clojure_for_the_brave_and_the_true/#parallel-demons-concurrency","text":"Reference cell: Read and write a shared state. Mutual exclusion: Example with writing a log with several processes, e.g. concatenate \u201cab\u201d and \u201ccd\u201d in a file results in \u201cacbd\u201d. Deadlock: On a table, every one has to take the left and right stick and the same time. However, there is only one stick per person. Leading to a deadlock. Solutions to these are future (new thread), delay (like future but executed only at deref time), promise (empty memory location shared to all thread that will receive value only once with deliver ). The advantage is all the execution are cached. Note : deference is done with either the defer function or the @ sign in front of the variable.","title":"Parallel demons     :concurrency:"},{"location":"cards/20200430160432-clojure_for_the_brave_and_the_true/#references-type-concurrencyepochal_time_model","text":"atom are identities that can be set and shared by multiple threads. They use a set and compare algorithm, i.e. the swap! function modifies the value of the atom variable only if its values did not change between the beginning and the end of the transaction. swap! and reset! are the main function to work with atoms. watch are function with four arguments: a key (a keyword for identifying the process calling the watcher), a reference variable being watched, the old-state, and the new state. ( defn f [ key watched old-state new-state ] nil ) A watcher function is attached to a reference type (e.g an atom) with the add-watch function having the following signature: ( def counter ( atom 0 )) ( add-watch counter :watching-counter watch-fn ) Validators are functions that can check if new states are valid. They take as argument the atom and return a boolean. They are added to the atom as follow ( defn bigger-than-1 [ x ] ( or ( > x 1 ) ( throw ( IllegalStateException. \"That's too small\" )))) ( def account ( atom 2 :validator bigger-than-1 )) ( swap! account inc ) ( swap! account - 10 ) ;; Throw an error ref type are the ACI in the ACID accronym (atomic, consistent and isolated) and use STM . It means that either the operations between two refs happened correctly, or the transaction is aborted. alter and dosync are the key functions. In a transaction (that is the body of dosync ), every ref keep their state to the transaction (invisible to outside threads) and when the transaction tries to commit, every ref checks if the value has been altered by other threads. If any of them has been change, then none of the ref are updated, and the transaction restart with the new value and commits only when the initial states has not been /alter/ed by other processes. commute also allow to change the state of a ref. However, at transaction time, if ref states have been altered, only the commute part is run again with the new states, which might lead to inconsistent state, but increased performance. ensure function protects refs from being modified by other transaction. This is helpful, when a transaction must modify only one refs, but the other related refs must not be altered by other transaction. 5. vars are associations between symbols and objects. ^:dynamic is a keyword in def to signal to clojure that a vars is dynamic. Varnames are enclosed around * (e.g. *user-email* ) to show to other programmers that the variable is dynamic. bindings is a dynamic let . Dynamic vars are often use to name a resource that one ore more functions target. set! allows to change the state of the dynamic vars. alter-var-root allows to rebind a immutable vars (which is unadvised), and with-redefs allows to create local binding for testing. 6. pmap and the following ppmap can be used to execute parallel task: ( defn ppmap \"Partitioned pmap, for grouping map ops together to make parallel overehead worthwile\" [ grain-size f & colls ] ( apply concat ( apply pmap ( fn [ & pgroups ] ( doall ( apply map f pgroups ))) ( map ( partial partition-all grain-size ) colls ))))","title":"References type     :concurrency:epochal_time_model:"},{"location":"cards/20200430160432-clojure_for_the_brave_and_the_true/#coreasync-and-channels-core_async","text":"chan creates a channel. And channel communicate through messages . One can put and take message. Processes wait for completion of their message. Process: Wait and do nothing until successful completion of either put or take from a channel. After success of the operation, continue. go and their blocks ( go blocks ) runs separately on a concurrent thread. go creates a process (i.e. its go block), which runs a pool of threads equal two plus the number of machines cores (avoiding the overhead of creating threads). Each go block only live until it reach the ends of its body. <! and <!! are the take function. It listen to the channel and wait until an another process puts a value in the channel which the take function returns. >! and >!! are the put function which always return true. It provides a message to a channel and wait until the message to be taken by another process before releasing resources. The number of ! in the operation depends if one is inside a go block (one ! ) or not (two ! ). Blocking and parking waiting are key to understand the number of ! . Parking wait allows a thread to handle several process (and this is only possible in a go block ). When one of the process starts to wait, the thread put it aside and starts an another process until it starts to wait, and so on. Use poll! and offer! to have non blocking channel interactions in the REPL. Channel buffers are created as following: ( def buffer-size 2 ) ( def channel-buffer ( chan buffer-size )) This means we can create 2 values without waiting for a response. sliding-buffer (FIFO) and dropping-buffer (LIFO) can be used to discard channel message without blocking. 5. close! closes channel. A closed channel does not accept any puts anymore and after all the values have been retrieved, the subsequent takes return nil . 6. alts!! lets us use the result of the first successful channel operation among a collection of channel operations. The elegant solution with alts!! is one can define a timeout ( let [[ message channel ] ( alts!! [ c1 c2 ( timout 20 )])] ;; c1 and c2 are predefined channels. ( println message )) if the timeout is the first to finish than message is nil . See alt! macro as well. 7. Queues and pipelines (escaping the callback hell) are common patterns.","title":"core.async and channels     :core_async:"},{"location":"cards/20200430160432-clojure_for_the_brave_and_the_true/#abstraction-and-polymorphism","text":"Multimethods ( defmulti method-name ( fn [ x ] ( :type x ))) ;; or simplty :type, can be more complicated as well ( defmethod method-name :hello [ x ] \"Hello\" ) ( defmethod method-name :good-bye [ x ] \"Good-bye\" ) ( defmethod method-name :default [ x ] \"I don't know you\" ) ( method-name { :type :hello }) ; => Hello ( method-name { :type :good-bye }) ; Good-bye ( method-name { :type :what? }) ; => I don't know you One can also create hierarchies with derive and namespace keywords. 2. A protocol allows to make dispatch by the type of the first argument and it is a collection of polymorphic operations (unlike multimethod which is just one function). Methods from protocols can not have a & rest argument. Key functions are defprotocol , extend-type , extend-protocol (for specifying for several type at once). - Caveat: methods from protocols are property of the namespace and not from the object. 3. Records are extension of hash-map . ( defrecord WereWolf [ name title ]) ( WereWolf. \"David\" \"Master\" ) ( ->WereWolf \"David\" \"Master\" ) ( map->WereWolf { :name \"David\" :title \"Master\" }) On has to use the :import: statement in the ns macro in order to import records. One can access field through the keyword or the dot . macro. ( .name ( WereWolf. \"David\" \"Master\" )) ; \"David\" ( :title ( WereWolf. \"David\" \"Master\" )) ; \"Master\" Any function on map works on record (although they do not retain their class if one dissoc or assoc them). Here is how one could extend a protocol. ( defprotocol WereCreature \"Awesom Were\" ( full-moon-behavior [ x ] \"Full-moon behavior\" )) ( defrecord WereWolf [ name title ] WereCreature ( full-moon-behavior [ x ] ( str name \" will kill everyone\" ))) ( full-moon-behavior ( WereWolf. \"David\" \"Master\" )) deftype , reify , proxy . reify is about implementing an anonymous protocol at runtime.","title":"Abstraction and polymorphism"},{"location":"cards/20200430160432-clojure_for_the_brave_and_the_true/#link","text":"Brave and the True","title":"Link"},{"location":"cards/20200430160432-clojure_for_the_brave_and_the_true/#see-also-generated","text":"Applied Clojure CLI Arguments Clojure core.async David Nolen Life In Dynamic Typing Mastering Clojure Macro Multiple Environment Simple Made Easy specs TODO","title":"See also (generated)"},{"location":"cards/20200430180442-org_mode/","text":"Org mode \u00b6 tags: org-mode Orgmk allows to use command line for exporting org files. org2gfm [ OPTION ] FILE Tricks \u00b6 Changing timestamp status . shift-up/down on the delimiters. See also (generated) \u00b6 Home for ideas for my Zettelkasten","title":"Org mode"},{"location":"cards/20200430180442-org_mode/#org-mode","text":"tags: org-mode Orgmk allows to use command line for exporting org files. org2gfm [ OPTION ] FILE","title":"Org mode"},{"location":"cards/20200430180442-org_mode/#tricks","text":"Changing timestamp status . shift-up/down on the delimiters.","title":"Tricks"},{"location":"cards/20200430180442-org_mode/#see-also-generated","text":"Home for ideas for my Zettelkasten","title":"See also (generated)"},{"location":"cards/20200430190921-design/","text":"Design \u00b6 Links \u00b6 Design, Composition, and Performance - Rich Hickey See also (generated) \u00b6 Applied Clojure Simple Made Easy","title":"Design"},{"location":"cards/20200430190921-design/#design","text":"","title":"Design"},{"location":"cards/20200430190921-design/#links","text":"Design, Composition, and Performance - Rich Hickey","title":"Links"},{"location":"cards/20200430190921-design/#see-also-generated","text":"Applied Clojure Simple Made Easy","title":"See also (generated)"},{"location":"cards/20200430235013-specs/","text":"Specs \u00b6 Links \u00b6 See also (generated) \u00b6 Applied Clojure Clojure Clojure for the brave and the true Life In Dynamic Typing Mastering Clojure Macro TODO","title":"Specs"},{"location":"cards/20200430235013-specs/#specs","text":"","title":"Specs"},{"location":"cards/20200430235013-specs/#links","text":"","title":"Links"},{"location":"cards/20200430235013-specs/#see-also-generated","text":"Applied Clojure Clojure Clojure for the brave and the true Life In Dynamic Typing Mastering Clojure Macro TODO","title":"See also (generated)"},{"location":"cards/20200501163355-goals/","text":"Goals \u00b6 See also (generated) \u00b6 TODO","title":"Goals"},{"location":"cards/20200501163355-goals/#goals","text":"","title":"Goals"},{"location":"cards/20200501163355-goals/#see-also-generated","text":"TODO","title":"See also (generated)"},{"location":"cards/20200501201607-quotes/","text":"Quotes \u00b6 Comics \u00b6 The measure of man lies not in what he says but in what he does . \u2013 Johnatan KENT Fiction \u00b6 Si on n\u2019est pas pr\u00eat \u00e0 tout, on n\u2019est pr\u00eat \u00e0 rien. \u2013 Paul AUSTER. A career is wonderful, but you can\u2019t curl up with it on a cold night. \u2013 Marilyn MONROE Science \u00b6 These quote are attributed to Einstein but I am not convinced. You can\u2019t blame gravity for falling in love. Learn from yesterday, live for today, hope for tomorrow. The important thing is not to stop questioning. Try not to become a man of success, but rather try to become a man of value. These, however, are probably from Einstein. Insanity: doing the same thing over and over again and expecting different results. The true sign of intelligence is not knowledge but imagination. The development of general ability for independent thinking and judgment should always be placed foremost. \u2013 Albert EINSTEIN Education \u00b6 Everybody is a genius. But if you judge a dolphin by its ability to climb a tree, it will live its whole life believing that it is stupid. \u2013 Anonymous Life Style \u00b6 These are inspirational philosophy [but not empirically approved in class room]. Growth mindset is about meaningful and purposed efforts. \u2013 Carol DWECK Grit is passion and sustained persistence applied toward long-term achievement, with no particular concern for rewards or recognition along the way. \u2013 Angela DUCKWORTH There should be a mixed between targeted skills [with clear steps to achieve them] and efforts. Deliberated practice is the key to mastery. Computer Science \u00b6 I don\u2019t know, I don\u2019t want to know. (Rich Hickey) In C++ and now in Haskell, we used to say that If it compiles, it is probably correct. It was as true then, as it is now. (Rich Hickey) Programmers know the benefits of everything and the tradeoffs of nothing. (Rich Hickey) tags: clj See also (generated) \u00b6 Clojure","title":"Quotes"},{"location":"cards/20200501201607-quotes/#quotes","text":"","title":"Quotes"},{"location":"cards/20200501201607-quotes/#comics","text":"The measure of man lies not in what he says but in what he does . \u2013 Johnatan KENT","title":"Comics"},{"location":"cards/20200501201607-quotes/#fiction","text":"Si on n\u2019est pas pr\u00eat \u00e0 tout, on n\u2019est pr\u00eat \u00e0 rien. \u2013 Paul AUSTER. A career is wonderful, but you can\u2019t curl up with it on a cold night. \u2013 Marilyn MONROE","title":"Fiction"},{"location":"cards/20200501201607-quotes/#science","text":"These quote are attributed to Einstein but I am not convinced. You can\u2019t blame gravity for falling in love. Learn from yesterday, live for today, hope for tomorrow. The important thing is not to stop questioning. Try not to become a man of success, but rather try to become a man of value. These, however, are probably from Einstein. Insanity: doing the same thing over and over again and expecting different results. The true sign of intelligence is not knowledge but imagination. The development of general ability for independent thinking and judgment should always be placed foremost. \u2013 Albert EINSTEIN","title":"Science"},{"location":"cards/20200501201607-quotes/#education","text":"Everybody is a genius. But if you judge a dolphin by its ability to climb a tree, it will live its whole life believing that it is stupid. \u2013 Anonymous","title":"Education"},{"location":"cards/20200501201607-quotes/#life-style","text":"These are inspirational philosophy [but not empirically approved in class room]. Growth mindset is about meaningful and purposed efforts. \u2013 Carol DWECK Grit is passion and sustained persistence applied toward long-term achievement, with no particular concern for rewards or recognition along the way. \u2013 Angela DUCKWORTH There should be a mixed between targeted skills [with clear steps to achieve them] and efforts. Deliberated practice is the key to mastery.","title":"Life Style"},{"location":"cards/20200501201607-quotes/#computer-science","text":"I don\u2019t know, I don\u2019t want to know. (Rich Hickey) In C++ and now in Haskell, we used to say that If it compiles, it is probably correct. It was as true then, as it is now. (Rich Hickey) Programmers know the benefits of everything and the tradeoffs of nothing. (Rich Hickey) tags: clj","title":"Computer Science"},{"location":"cards/20200501201607-quotes/#see-also-generated","text":"Clojure","title":"See also (generated)"},{"location":"cards/20200502122138-simple_made_easy/","text":"Simple Made Easy \u00b6 See also (generated) \u00b6 Applied Clojure Clojure Clojure for the brave and the true Design Mastering Clojure Macro","title":"Simple Made Easy"},{"location":"cards/20200502122138-simple_made_easy/#simple-made-easy","text":"","title":"Simple Made Easy"},{"location":"cards/20200502122138-simple_made_easy/#see-also-generated","text":"Applied Clojure Clojure Clojure for the brave and the true Design Mastering Clojure Macro","title":"See also (generated)"},{"location":"cards/20200503165952-materiala/","text":"Materiala \u00b6 My own tools for linking mkdocs and marginalia. See here for a rationale. TODO: \u00b6 Github actions for updating the website and leaving the website in the git repo. Deploy to clojar. Get a group-id. Features \u00b6 Including multiple folder [2020-05-03 Sun] Extending the writer [2020-05-03 Sun] Parse non conform clojure code (marginalia has issue to reparse). [2020-05-03 Sun] Link \u00b6 https://github.com/davidpham87/materiala/ See also (generated) \u00b6 Multiple Environment","title":"Materiala"},{"location":"cards/20200503165952-materiala/#materiala","text":"My own tools for linking mkdocs and marginalia. See here for a rationale.","title":"Materiala"},{"location":"cards/20200503165952-materiala/#todo","text":"Github actions for updating the website and leaving the website in the git repo. Deploy to clojar. Get a group-id.","title":"TODO:"},{"location":"cards/20200503165952-materiala/#features","text":"Including multiple folder [2020-05-03 Sun] Extending the writer [2020-05-03 Sun] Parse non conform clojure code (marginalia has issue to reparse). [2020-05-03 Sun]","title":"Features"},{"location":"cards/20200503165952-materiala/#link","text":"https://github.com/davidpham87/materiala/","title":"Link"},{"location":"cards/20200503165952-materiala/#see-also-generated","text":"Multiple Environment","title":"See also (generated)"},{"location":"cards/20200503222619-org_roam_clj/","text":"org-roam-clj \u00b6 Library for extending org-roam. Ideas \u00b6 Extend to markdown parsing. Use Hugo for rendering. Cross device syncing with privacy. See also (generated) \u00b6 Applied Clojure Clojure Clojure for the brave and the true Mastering Clojure Macro","title":"org-roam-clj"},{"location":"cards/20200503222619-org_roam_clj/#org-roam-clj","text":"Library for extending org-roam.","title":"org-roam-clj"},{"location":"cards/20200503222619-org_roam_clj/#ideas","text":"Extend to markdown parsing. Use Hugo for rendering. Cross device syncing with privacy.","title":"Ideas"},{"location":"cards/20200503222619-org_roam_clj/#see-also-generated","text":"Applied Clojure Clojure Clojure for the brave and the true Mastering Clojure Macro","title":"See also (generated)"},{"location":"cards/continuing_education/","text":"Continuing Education \u00b6 TODO FRM \u00b6 Read and do the exams for the two tests. TODO CFA \u00b6 Level 2 \u00b6 [X] Register [ ] Study TODO CQF \u00b6 TODO Udacity Nanodegree \u00b6 TODO Fullstack \u00b6 TODO Data Streaming \u00b6 DONE Front-end \u00b6 Not necessary thanks to ClojureScript. DONE Deep learning \u00b6 DONE Machine learning \u00b6 TODO Edx \u00b6 Finish Micro Master in statistics and Data Science. See also (generated) \u00b6 -","title":"Continuing Education"},{"location":"cards/continuing_education/#continuing-education","text":"","title":"Continuing Education"},{"location":"cards/continuing_education/#todo-frm","text":"Read and do the exams for the two tests.","title":"TODO FRM"},{"location":"cards/continuing_education/#todo-cfa","text":"","title":"TODO CFA"},{"location":"cards/continuing_education/#level-2","text":"[X] Register [ ] Study","title":"Level 2"},{"location":"cards/continuing_education/#todo-cqf","text":"","title":"TODO CQF"},{"location":"cards/continuing_education/#todo-udacity-nanodegree","text":"","title":"TODO Udacity Nanodegree"},{"location":"cards/continuing_education/#todo-fullstack","text":"","title":"TODO Fullstack"},{"location":"cards/continuing_education/#todo-data-streaming","text":"","title":"TODO Data Streaming"},{"location":"cards/continuing_education/#done-front-end","text":"Not necessary thanks to ClojureScript.","title":"DONE Front-end"},{"location":"cards/continuing_education/#done-deep-learning","text":"","title":"DONE Deep learning"},{"location":"cards/continuing_education/#done-machine-learning","text":"","title":"DONE Machine learning"},{"location":"cards/continuing_education/#todo-edx","text":"Finish Micro Master in statistics and Data Science.","title":"TODO Edx"},{"location":"cards/continuing_education/#see-also-generated","text":"-","title":"See also (generated)"},{"location":"cards/cpp/","text":"C/C++ \u00b6 [ ] Learn C the hard way [ ] Use Cling , the C++ interpreter [X] Learn CUDA <-> Udacity [ ] Read a tour of C++ [ ] Modern C++ (Scott Meyer) [ ] Redo the cpp exercise [ ] Reread Google Style Guide in C++ See also (generated) \u00b6 -","title":"C/C++"},{"location":"cards/cpp/#cc","text":"[ ] Learn C the hard way [ ] Use Cling , the C++ interpreter [X] Learn CUDA <-> Udacity [ ] Read a tour of C++ [ ] Modern C++ (Scott Meyer) [ ] Redo the cpp exercise [ ] Reread Google Style Guide in C++","title":"C/C++"},{"location":"cards/cpp/#see-also-generated","text":"-","title":"See also (generated)"},{"location":"cards/devops/","text":"Docker and Kubernete \u00b6 Docker are containers/processes which can be considered as lightweight VMs. Kuberenetes (K8s) are container orchestration. They allow for load balancing (2 level with ingress (external load balancing) and service (internal load balancer)) on pods (docker containers). They allow for recover from failure for resource, and rolling update. DevOPS \u00b6 Learn about ansible (again). Ubuntu Server/Install Starting Projects \u00b6 DONE Git [3/3] \u00b6 Remains to test in practice, but the project is pretty stable now. [X] Create a python file that writes the makefile automatically [X] Create README.md where appropriate. [X] Test the application See also (generated) \u00b6 -","title":"Docker and Kubernete"},{"location":"cards/devops/#docker-and-kubernete","text":"Docker are containers/processes which can be considered as lightweight VMs. Kuberenetes (K8s) are container orchestration. They allow for load balancing (2 level with ingress (external load balancing) and service (internal load balancer)) on pods (docker containers). They allow for recover from failure for resource, and rolling update.","title":"Docker and Kubernete"},{"location":"cards/devops/#devops","text":"Learn about ansible (again).","title":"DevOPS"},{"location":"cards/devops/#ubuntu-serverinstall-starting-projects","text":"","title":"Ubuntu Server/Install Starting Projects"},{"location":"cards/devops/#done-git-33","text":"Remains to test in practice, but the project is pretty stable now. [X] Create a python file that writes the makefile automatically [X] Create README.md where appropriate. [X] Test the application","title":"DONE Git [3/3]"},{"location":"cards/devops/#see-also-generated","text":"-","title":"See also (generated)"},{"location":"cards/general/","text":"General \u00b6 Learn with https://www.hackerrank.com/ (especially Clojure). Complete some harder problems in functional programming. www.pythonchallenge.com Exercise TODO Read introduction to elisp \u00b6 TODO Diff, ediff \u00b6 a or b to select which version is correct. Append x for saving. magit and git, gitimmersion \u00b6 [X] Revert file in magit [ ] Read introduction Master/read manual org-mode \u00b6 org-mode easy template (e.g. <s[tab] ) allows to easily include org syntax. C-c C-q (insert tags), C-c / (filter org-file by). Rewrite emacs.d through org-mode and usepackage. \u00b6 It would be good to get a unified version of my .emacs.d with org files and usepackage. DONE Dired mode \u00b6 Find files with grep Still have to learn the new shortcuts. Most important are R , C , D , ( , % m and =% g0. Using Q , empower the user to query and replace in files. Using * u to select all non-saved buffer to close them all. DONE Perfect use of keyboard [2/2] \u00b6 [X] The comma should be hit with the middle finger. [X] Emacs keybindings should be used using both hands, this has to be set with key-bindings. Tip: use the hand palm for reaching the CTRL keys. DONE Write a script to update my-emacs-config automatically. \u00b6 Best way would be to use git. Used a fork of emacs-live. DONE Remap C-c C-z to C-c C-y for Swiss Keyboards, for terminal switching. \u00b6 DONE Emmet in Emacs, with HAML filter in the json snippet. \u00b6 HAML is automatic in emacs. However, the key bindings need to be remapped as the usage of `C-j` is too much widespread. DONE Cppcheck \u00b6 wget https://raw.githubusercontent.com/google/styleguide/gh-pages/cpplint/cpplint.py sudo mv cpplint.py /usr/local/bin/cpplint.py sudo chmod 755 /usr/local/bin/cpplint.py Also uncomment the following ( custom-set-variables ' ( flycheck-c/c++-googlelint-executable \"/usr/local/bin/cpplint.py\" )) in cpp-settings.el . DONE Aspell \u00b6 Set dictionary in French and German. sudo apt-get install aspell-fr aspell-de Go to char (avy-goto-word-or-subword-1) \u00b6 In prelude \"C-c j\" and then char jumps to a given character in the buffer. See also (generated) \u00b6 Materiala Multiple Environment","title":"General"},{"location":"cards/general/#general","text":"Learn with https://www.hackerrank.com/ (especially Clojure). Complete some harder problems in functional programming. www.pythonchallenge.com Exercise","title":"General"},{"location":"cards/general/#todo-read-introduction-to-elisp","text":"","title":"TODO Read introduction to elisp"},{"location":"cards/general/#todo-diff-ediff","text":"a or b to select which version is correct. Append x for saving.","title":"TODO Diff, ediff"},{"location":"cards/general/#magit-and-git-gitimmersion","text":"[X] Revert file in magit [ ] Read introduction","title":"magit and git, gitimmersion"},{"location":"cards/general/#masterread-manual-org-mode","text":"org-mode easy template (e.g. <s[tab] ) allows to easily include org syntax. C-c C-q (insert tags), C-c / (filter org-file by).","title":"Master/read manual org-mode"},{"location":"cards/general/#rewrite-emacsd-through-org-mode-and-usepackage","text":"It would be good to get a unified version of my .emacs.d with org files and usepackage.","title":"Rewrite emacs.d through org-mode and usepackage."},{"location":"cards/general/#done-dired-mode","text":"Find files with grep Still have to learn the new shortcuts. Most important are R , C , D , ( , % m and =% g0. Using Q , empower the user to query and replace in files. Using * u to select all non-saved buffer to close them all.","title":"DONE Dired mode"},{"location":"cards/general/#done-perfect-use-of-keyboard-22","text":"[X] The comma should be hit with the middle finger. [X] Emacs keybindings should be used using both hands, this has to be set with key-bindings. Tip: use the hand palm for reaching the CTRL keys.","title":"DONE Perfect use of keyboard [2/2]"},{"location":"cards/general/#done-write-a-script-to-update-my-emacs-config-automatically","text":"Best way would be to use git. Used a fork of emacs-live.","title":"DONE Write a script to update my-emacs-config automatically."},{"location":"cards/general/#done-remap-c-c-c-z-to-c-c-c-y-for-swiss-keyboards-for-terminal-switching","text":"","title":"DONE Remap C-c C-z to C-c C-y for Swiss Keyboards, for terminal switching."},{"location":"cards/general/#done-emmet-in-emacs-with-haml-filter-in-the-json-snippet","text":"HAML is automatic in emacs. However, the key bindings need to be remapped as the usage of `C-j` is too much widespread.","title":"DONE Emmet in Emacs, with HAML filter in the json snippet."},{"location":"cards/general/#done-cppcheck","text":"wget https://raw.githubusercontent.com/google/styleguide/gh-pages/cpplint/cpplint.py sudo mv cpplint.py /usr/local/bin/cpplint.py sudo chmod 755 /usr/local/bin/cpplint.py Also uncomment the following ( custom-set-variables ' ( flycheck-c/c++-googlelint-executable \"/usr/local/bin/cpplint.py\" )) in cpp-settings.el .","title":"DONE Cppcheck"},{"location":"cards/general/#done-aspell","text":"Set dictionary in French and German. sudo apt-get install aspell-fr aspell-de","title":"DONE Aspell"},{"location":"cards/general/#go-to-char-avy-goto-word-or-subword-1","text":"In prelude \"C-c j\" and then char jumps to a given character in the buffer.","title":"Go to char (avy-goto-word-or-subword-1)"},{"location":"cards/general/#see-also-generated","text":"Materiala Multiple Environment","title":"See also (generated)"},{"location":"cards/gratitude/","text":"Happiness and Sucess \u00b6 Theory \u00b6 The Ted Talk from Happiness Advantage: Linking Positive Brains to Performance from Shawn Achor teach briefly the advantage of positive psychology. Few important points: 90% of long-term happiness come from intrinsic abilities. 75% of job success is optimism level, social support and seeing stress as a challenge instead of a threat. We are taught that if we work hard, then success comes, and happiness afterwards. This is rooted in our management and parenting style, however it is deeply wrong: if we reach the success, then we would change the success and never reach happiness. Hence we better get happy, and then reach success. Rewire your brain \u00b6 There are five steps to rewire our brain: 3 gratitude, 3 new things that you are grateful for each day. Journal, living again a positive experience happening for the past 24 hours. Meditation Exercise Random act of kindness, e.g. write to a random person for praising them. As we all know, social pressure is a good way to reach a goal, hence this is where my 3 gratitude per day and my logging. Gratitude \u00b6 2020 \u00b6 March \u00b6 <2020-03-26 Thu> I have been healthy and could eat really well with my wife. I still could learn and enjoy my mind. My family seems healthy. <2020-03-08 Sun> Spent the saturday with my parents and talked to them. I owe them a lot. I am grateful to everyone who spends their time on open source and share their knowledge in talks over youtube and blog post. I love my wife, she is fun and great. <2020-03-03 Tue> Dancing with my wife WCS is really fun and I still love it. I have a job where I can code in Clojure, linux and emacs. I love my family as they are really nice and always here for me. Feburary \u00b6 <2020-02-15 Sat> Dancing with my wife WCS is an incredible feeling and we have a lot of fun. I am able to meet and talk my parents often and they are really nice with me. My family is incredible. I received my bonus and I am really happy to be in the position of not thinking about money on my every day life. January \u00b6 <2020-01-29 Wed> I am grateful I danced with my wife for an hour and shared a wonderful meal with her. I had a wonderful workout session. I could develop on an azure machine and people seems to trust me at work. <2020-01-07 Tue> I am grateful I could dance with my wife today and I also had a great dinner for sushis. I could work in peace today where I could focus on reading a paper on financial risk prediction. Everybody seemed to really like to see me again at work. <2020-01-05 Sun> I am grateful to be married to Mimi, she is an wonderful angel who lives by my side. I have the full capacity of my brain and people judge as competent individual. I like to smile and laugh. 2016 \u00b6 January \u00b6 [2016-01-04 Mon] I am grateful to be curious and be interested by several topics (finance, statistics, computer science, economics and mathematics). I was born in Switzerland, the most boring but peaceful country on the globe. I can sleep in warm flat and wonderful mattress, which is the most expensive object in my flat (yes, even my computers are not as expensive!). [2016-01-03 Sun] I had a wonderful new year with my best friends. My parents are still alive and well and they do care about me. I am happy to be able to learn new things every day. 2015 \u00b6 December \u00b6 [2015-12-12 Sat] I am little bit behind, (I was kind of sick). I can use emacs at work. My fiancee is a wonderful, charming and generous person, I am really lucky to have met her. During my past years at Zurich, I met outstanding colleagues, that I can now count as, I would dear say, my friends. [2015-12-07 Mon] I am have a home where I can sleep warmly during winter. I took the pain to learn emacs and its ecosystem. It made me much more productive and much better programmer. I love my fiancee who always support me and makes me a better person. [2015-12-03 Thu] I am actually on vacation. I have a job that allows to work eighty percents and I can sleep 8 hours a day. I have wonderful friends that allows me to laugh and have fun. [2015-12-02 Wed] I have a decent/good health that allows to sustain any decent amount of stress. I have a wonderful little and hard working brother, that behave really like a modern knight. I am happy, that I got the chance to study mathematics at the EPFL. [2015-12-01 Tue] I have the full ability of my two legs. I wish, there would exist a decent solution to give back the mobility to disabled people. I had my parents to teach me the value of education and hard work. Corollary from point 2, I had a lot luck to have marvelous parents who could supported me during my life and loved me. November \u00b6 [2015-11-30 Mon] I have the full capacity of my two hands: it would so much harder to write in emacs otherwise\u2026 I live a country where I am not discriminated because of my origins. I learned several languages during my school, so I can interact with a lot of persons. Journaling \u00b6 2020 \u00b6 March \u00b6 <2020-03-26 Thu> I received my bonus yesterday, it was cool. I spent my days with my wife home, where we work side by side. We ate some delicious home made pizzas. I could still learn a bit about Clojure (async programming). <2020-03-07 Sat> I could sleep with my wife, read about Clojure (transducers and specs). I also went to the gym and I can really appreciate to still be healthy. <2020-03-03 Tue> I danced with my wife, and I could code in Clojure for the whole day and I learned about specs, which makes me happy because I can get better at my job. I also recently learn about how to link C code to Clojure. February \u00b6 <2020-02-15 Sat> I read about deliberate practice. Deliberate meaning done consciously and intentionally. This is the key to master skills in any field. <2020-02-08 Sat> Swingtzerland. It was a great weekend with several parties. We will totally repeat the experience again. The fun was to start to take liberty towards patterns and enjoy the music knowing there is nothing wrong doing \u201crythms\u201d. January :wcs: \u00b6 <2020-01-29 Wed> I worked on the hand over of a project from last year to hand it over to a colleague. I will be hard for him. I am happy I had a wonderful workout session and I can still code in Clojure and python at work. <2020-01-09 Thu> Something I forgot to write for 2019: I wrote a full web app for a simple quizz for Vincent for his lectures. It was quit successful. The challenge is really to save the state and to make it consistent. <2020-01-07 Tue> I was sick yesterday, but I could integrate drag and drop into my model explorer. I went to work and everybody seemed really happy to see me. I managed to understand the paper about financial risk prediction, I am still not convinced. I learned about pulsing in WCS, it is the act of moving forward your torso (like breathing) on every beat. The down beat are every odd beat and up beat are the even beat. We learned to counting the music while doing our steps (removing the usual pattern of starting a pattern on 1). The hook is some feature of a song (a rhythm, lyrics or musical trait) that make us remember the song (without really knowing the title nor the singer). The energy in WCS is provided by stretching our legs in contrast to Lindy Hop which is by bending the knees. I could read about Clojure macros yesterday evening and finally start to write some notes in my other note file. <2020-01-05 Sun> Today is my first entry since years. I have finally have the energy to write something back. In January 2016, just after my last entry, I started to play Star Wars Galaxy of Heroes. The game is incredibly addictive including final fantasy tactics and card game elements. It is also a free-to-play game, but makes the best to force you to pay. I was playing too much, every day between 2 and 3 hours and much more during the weekend. I was one of the best free-to-play players in the world though. I made a lot of really good friends online which shared a passion with me. I stopped because it took a toll on my health, but also on my work. I failed CFA level II, last year, most importantly, I have been denied a job at the SNB as quantitative analyst which required all my skills. My wife also was not really happy of me playing. I also failed to get a job the BIS (a second time). Which led me to stop the game. The last four years have been rich in events. I don\u2019t remember much of 2016 though [except that I had to do my semester projects to finish my master]. I also was in Interlaken to see the Jungfrau. In 2017, I finally finished my master at the ETH in Applied Mathematics. My master thesis was in deep reinforcement learning where I tried to create a chat bot with a policy optimization and LSTMs. The final output was not really good, but I am happy I learned how to do graphics with tikz. I also learned Tensorflow and learned lots in Machine Learning (especially in vision). I changed job to join Vescore in Vontobel as quantitative analyst where I should have designed and created investment strategies [I joined in December]. The funny thing about the interview is I met Yun Bai who was an assistant at EPFL who I supported during her first year in Switzerland and I also talked about Game of Thrones. We went in Hua Hin over Christmas with my parents and the parents of Mimi. In 2018, I graduated from 2 Udacity nanodegrees (ML and DL) and one Coursera DL specialization. I also got married on June 21st with Myriam! We had wonderful wedding in Thailand where we had most of our friends! We relaunched the AI fund at work on 26th of October. The first version was aborted, because our position in commodity was too high. I had to fucking relearn Matlab [and this is one of the worst language still used]. During that year, I also studied deep artistic style transfer (using VGG16 to create an embedding for a content and style picture and merge them with a generative models). I almost put into production, but the issue at the time was the inability to convert my model to tensorflow-js, and also the issue that the experience was bad when the client did not have a GPU. In 2019, Kevin went to Canada for studying. I miss him. My job asked me to create web apps and I convinced them to allow me to learn Clojure(Script) for the task [shadow-cljs, reagent, re-frame, material-ui]. I am delightfully and wonderfully happy about that choice as it really made me a much better programmer. I created many apps mainly for data visualization but also for user input and backend, and learn how to manage nginx for creating many apps. They also gave me a Linux machine with admin rights. I really improved my skills in Emacs (structure editing with parinfer is great), I also swap spaceemacs to Emacs Prelude which is more idiomatic [I still should learn more about Elisp]. I watched numerous talks about Clojure and I should write summaries to gather their knowledge. One of the key message: values of values, design and performance [collects as much constraints as possible to innovate], information/data and simplicity and log absolutely everything to create an index. This year, I flew to Japan and Hong Kong (I visited Laure and Xin-Xin), and in May I flew to Thailand again with Kevin and my parents. At work, I also inherited from two funds which are really interesting and I hope I will have time to improve them next year. I also stopped playing. Michael, a really good colleague, left my team and I was really sad. Still at work, we merged my big team with a sister team creating a 80 FTE team. The new team is really fun and I feel more integrated in the new one than the old. EXTREMELY INSANE : in 2019, Mimi and I bought a flat in Oerlikon on the 15th Floor and will move in 2020! Cost: 1 135 000 CHF . Mortgage rates are near 0 so I should be able to have 0 mortgage for 10 years! We also discovered a great stand up comedian: Trevor Noah who mimicks accent extremely well. I would love to be able to do so. Perspective for 2020: a kid with Mimi, CFA Level II, Clojure for numerics and ML, finish my dashboard apps [quick excel viz and model explorer], read more books and more importantly write about them. For the past 24 hours: I solved a printer bug for my parents in law and a javascript bug for my wife for her tabs. I saw my parents in Geneva. I slept and eat really well. I also checked about bikes and fitness studios in ZH. Most importantly, I restarted to write in my journal. During my Christmas vacations, I read thousands of pages of comics, so I am really happy and saw Patrick from New York, and watched the Rise of Skywalker twice, as well as His Dark Materials with Mimi! 2016 \u00b6 January \u00b6 [2016-01-04 Mon] Three great things happened in the last 24 hours. I had a wonderful lunch with my parents, I slept extremely well, and my professor was really satisfied about my project in missing data. As a side note, I am really happy to know how to add a bibliography link in a latex document for reftex-mode : %%% reftex-default-bibliography: (\"path/to/bibfile.bib\") [2016-01-03 Sun] Well, I had so many wonderful moments the past few weeks. I retired in the mountains for a few days, then I had my birthday with my colleagues from the SNB, and this was a wonderful night. I went into the new year with my best friend and I could talk with almost all the people I hold dear during the first of January. 2015 \u00b6 December \u00b6 [2015-12-12 Sat] I received a really positive year assessment at my job, and I had a great night talking with some colleague from the SNB yesterday. In the past few days, I have been playing with clojure and I am really happy with the language. [2015-12-07 Mon] For one of my project, I coded like hell for a whole day and I am really happy because I learned a lot and could find nice design solutions to my code. But the most warming experience is certainly sleeping with my fiancee during night and cuddle each other in one of nicest city of the world. During the weekend, I also solved some clojure katas and I am really proud of it! [2015-12-03 Thu] Today I was pretty geeky, I cleaned my flat, and I read two chapters of clojure the brave and the true, but the most difficult ones: clojure metaphysics and core.async. They are not so difficult and I am really happy to have understood it! [2015-12-02 Wed] With my fiancee, we went to a wonderful Japanese sushi restaurant and had a great time together where we shared our daily life. Her speaking partner who trains her at Swiss German, told me I had a decent accent. [2015-12-01 Tue] Today, I had lunch with George, an old colleague from the SNB and we went to the Don Leone, a great pizzeria in Z\u00fcrich. We discussed data science and several computer hack. I also learn a little bit more about him. Side note: I solved three problems on 4clojure and I finished to read All-Star Superman from Grant-Morrison. November \u00b6 [2015-11-30 Mon] I have seen my family in Geneva and we had a great time eating together, talking about the future or the holidays. Self-help \u00b6 Relationships \u00b6 Actions speaks more than words: provide your undivided attention to your audience [put away your phone]. Show you are totally focused. Reversal questions: keep the other speaking with two beats sentences [feedback/acknowledge, return of the energy]. Genuine feedback based on evidence and information. Writing \u00b6 Write to communicate not to impress: Use positive tense, short is best, replace verb + adverb with verb. See also (generated) \u00b6 Home for ideas for my Zettelkasten","title":"Happiness and Sucess"},{"location":"cards/gratitude/#happiness-and-sucess","text":"","title":"Happiness and Sucess"},{"location":"cards/gratitude/#theory","text":"The Ted Talk from Happiness Advantage: Linking Positive Brains to Performance from Shawn Achor teach briefly the advantage of positive psychology. Few important points: 90% of long-term happiness come from intrinsic abilities. 75% of job success is optimism level, social support and seeing stress as a challenge instead of a threat. We are taught that if we work hard, then success comes, and happiness afterwards. This is rooted in our management and parenting style, however it is deeply wrong: if we reach the success, then we would change the success and never reach happiness. Hence we better get happy, and then reach success.","title":"Theory"},{"location":"cards/gratitude/#rewire-your-brain","text":"There are five steps to rewire our brain: 3 gratitude, 3 new things that you are grateful for each day. Journal, living again a positive experience happening for the past 24 hours. Meditation Exercise Random act of kindness, e.g. write to a random person for praising them. As we all know, social pressure is a good way to reach a goal, hence this is where my 3 gratitude per day and my logging.","title":"Rewire your brain"},{"location":"cards/gratitude/#gratitude","text":"","title":"Gratitude"},{"location":"cards/gratitude/#2020","text":"","title":"2020"},{"location":"cards/gratitude/#march","text":"<2020-03-26 Thu> I have been healthy and could eat really well with my wife. I still could learn and enjoy my mind. My family seems healthy. <2020-03-08 Sun> Spent the saturday with my parents and talked to them. I owe them a lot. I am grateful to everyone who spends their time on open source and share their knowledge in talks over youtube and blog post. I love my wife, she is fun and great. <2020-03-03 Tue> Dancing with my wife WCS is really fun and I still love it. I have a job where I can code in Clojure, linux and emacs. I love my family as they are really nice and always here for me.","title":"March"},{"location":"cards/gratitude/#feburary","text":"<2020-02-15 Sat> Dancing with my wife WCS is an incredible feeling and we have a lot of fun. I am able to meet and talk my parents often and they are really nice with me. My family is incredible. I received my bonus and I am really happy to be in the position of not thinking about money on my every day life.","title":"Feburary"},{"location":"cards/gratitude/#january","text":"<2020-01-29 Wed> I am grateful I danced with my wife for an hour and shared a wonderful meal with her. I had a wonderful workout session. I could develop on an azure machine and people seems to trust me at work. <2020-01-07 Tue> I am grateful I could dance with my wife today and I also had a great dinner for sushis. I could work in peace today where I could focus on reading a paper on financial risk prediction. Everybody seemed to really like to see me again at work. <2020-01-05 Sun> I am grateful to be married to Mimi, she is an wonderful angel who lives by my side. I have the full capacity of my brain and people judge as competent individual. I like to smile and laugh.","title":"January"},{"location":"cards/gratitude/#2016","text":"","title":"2016"},{"location":"cards/gratitude/#january_1","text":"[2016-01-04 Mon] I am grateful to be curious and be interested by several topics (finance, statistics, computer science, economics and mathematics). I was born in Switzerland, the most boring but peaceful country on the globe. I can sleep in warm flat and wonderful mattress, which is the most expensive object in my flat (yes, even my computers are not as expensive!). [2016-01-03 Sun] I had a wonderful new year with my best friends. My parents are still alive and well and they do care about me. I am happy to be able to learn new things every day.","title":"January"},{"location":"cards/gratitude/#2015","text":"","title":"2015"},{"location":"cards/gratitude/#december","text":"[2015-12-12 Sat] I am little bit behind, (I was kind of sick). I can use emacs at work. My fiancee is a wonderful, charming and generous person, I am really lucky to have met her. During my past years at Zurich, I met outstanding colleagues, that I can now count as, I would dear say, my friends. [2015-12-07 Mon] I am have a home where I can sleep warmly during winter. I took the pain to learn emacs and its ecosystem. It made me much more productive and much better programmer. I love my fiancee who always support me and makes me a better person. [2015-12-03 Thu] I am actually on vacation. I have a job that allows to work eighty percents and I can sleep 8 hours a day. I have wonderful friends that allows me to laugh and have fun. [2015-12-02 Wed] I have a decent/good health that allows to sustain any decent amount of stress. I have a wonderful little and hard working brother, that behave really like a modern knight. I am happy, that I got the chance to study mathematics at the EPFL. [2015-12-01 Tue] I have the full ability of my two legs. I wish, there would exist a decent solution to give back the mobility to disabled people. I had my parents to teach me the value of education and hard work. Corollary from point 2, I had a lot luck to have marvelous parents who could supported me during my life and loved me.","title":"December"},{"location":"cards/gratitude/#november","text":"[2015-11-30 Mon] I have the full capacity of my two hands: it would so much harder to write in emacs otherwise\u2026 I live a country where I am not discriminated because of my origins. I learned several languages during my school, so I can interact with a lot of persons.","title":"November"},{"location":"cards/gratitude/#journaling","text":"","title":"Journaling"},{"location":"cards/gratitude/#2020_1","text":"","title":"2020"},{"location":"cards/gratitude/#march_1","text":"<2020-03-26 Thu> I received my bonus yesterday, it was cool. I spent my days with my wife home, where we work side by side. We ate some delicious home made pizzas. I could still learn a bit about Clojure (async programming). <2020-03-07 Sat> I could sleep with my wife, read about Clojure (transducers and specs). I also went to the gym and I can really appreciate to still be healthy. <2020-03-03 Tue> I danced with my wife, and I could code in Clojure for the whole day and I learned about specs, which makes me happy because I can get better at my job. I also recently learn about how to link C code to Clojure.","title":"March"},{"location":"cards/gratitude/#february","text":"<2020-02-15 Sat> I read about deliberate practice. Deliberate meaning done consciously and intentionally. This is the key to master skills in any field. <2020-02-08 Sat> Swingtzerland. It was a great weekend with several parties. We will totally repeat the experience again. The fun was to start to take liberty towards patterns and enjoy the music knowing there is nothing wrong doing \u201crythms\u201d.","title":"February"},{"location":"cards/gratitude/#january-wcs","text":"<2020-01-29 Wed> I worked on the hand over of a project from last year to hand it over to a colleague. I will be hard for him. I am happy I had a wonderful workout session and I can still code in Clojure and python at work. <2020-01-09 Thu> Something I forgot to write for 2019: I wrote a full web app for a simple quizz for Vincent for his lectures. It was quit successful. The challenge is really to save the state and to make it consistent. <2020-01-07 Tue> I was sick yesterday, but I could integrate drag and drop into my model explorer. I went to work and everybody seemed really happy to see me. I managed to understand the paper about financial risk prediction, I am still not convinced. I learned about pulsing in WCS, it is the act of moving forward your torso (like breathing) on every beat. The down beat are every odd beat and up beat are the even beat. We learned to counting the music while doing our steps (removing the usual pattern of starting a pattern on 1). The hook is some feature of a song (a rhythm, lyrics or musical trait) that make us remember the song (without really knowing the title nor the singer). The energy in WCS is provided by stretching our legs in contrast to Lindy Hop which is by bending the knees. I could read about Clojure macros yesterday evening and finally start to write some notes in my other note file. <2020-01-05 Sun> Today is my first entry since years. I have finally have the energy to write something back. In January 2016, just after my last entry, I started to play Star Wars Galaxy of Heroes. The game is incredibly addictive including final fantasy tactics and card game elements. It is also a free-to-play game, but makes the best to force you to pay. I was playing too much, every day between 2 and 3 hours and much more during the weekend. I was one of the best free-to-play players in the world though. I made a lot of really good friends online which shared a passion with me. I stopped because it took a toll on my health, but also on my work. I failed CFA level II, last year, most importantly, I have been denied a job at the SNB as quantitative analyst which required all my skills. My wife also was not really happy of me playing. I also failed to get a job the BIS (a second time). Which led me to stop the game. The last four years have been rich in events. I don\u2019t remember much of 2016 though [except that I had to do my semester projects to finish my master]. I also was in Interlaken to see the Jungfrau. In 2017, I finally finished my master at the ETH in Applied Mathematics. My master thesis was in deep reinforcement learning where I tried to create a chat bot with a policy optimization and LSTMs. The final output was not really good, but I am happy I learned how to do graphics with tikz. I also learned Tensorflow and learned lots in Machine Learning (especially in vision). I changed job to join Vescore in Vontobel as quantitative analyst where I should have designed and created investment strategies [I joined in December]. The funny thing about the interview is I met Yun Bai who was an assistant at EPFL who I supported during her first year in Switzerland and I also talked about Game of Thrones. We went in Hua Hin over Christmas with my parents and the parents of Mimi. In 2018, I graduated from 2 Udacity nanodegrees (ML and DL) and one Coursera DL specialization. I also got married on June 21st with Myriam! We had wonderful wedding in Thailand where we had most of our friends! We relaunched the AI fund at work on 26th of October. The first version was aborted, because our position in commodity was too high. I had to fucking relearn Matlab [and this is one of the worst language still used]. During that year, I also studied deep artistic style transfer (using VGG16 to create an embedding for a content and style picture and merge them with a generative models). I almost put into production, but the issue at the time was the inability to convert my model to tensorflow-js, and also the issue that the experience was bad when the client did not have a GPU. In 2019, Kevin went to Canada for studying. I miss him. My job asked me to create web apps and I convinced them to allow me to learn Clojure(Script) for the task [shadow-cljs, reagent, re-frame, material-ui]. I am delightfully and wonderfully happy about that choice as it really made me a much better programmer. I created many apps mainly for data visualization but also for user input and backend, and learn how to manage nginx for creating many apps. They also gave me a Linux machine with admin rights. I really improved my skills in Emacs (structure editing with parinfer is great), I also swap spaceemacs to Emacs Prelude which is more idiomatic [I still should learn more about Elisp]. I watched numerous talks about Clojure and I should write summaries to gather their knowledge. One of the key message: values of values, design and performance [collects as much constraints as possible to innovate], information/data and simplicity and log absolutely everything to create an index. This year, I flew to Japan and Hong Kong (I visited Laure and Xin-Xin), and in May I flew to Thailand again with Kevin and my parents. At work, I also inherited from two funds which are really interesting and I hope I will have time to improve them next year. I also stopped playing. Michael, a really good colleague, left my team and I was really sad. Still at work, we merged my big team with a sister team creating a 80 FTE team. The new team is really fun and I feel more integrated in the new one than the old. EXTREMELY INSANE : in 2019, Mimi and I bought a flat in Oerlikon on the 15th Floor and will move in 2020! Cost: 1 135 000 CHF . Mortgage rates are near 0 so I should be able to have 0 mortgage for 10 years! We also discovered a great stand up comedian: Trevor Noah who mimicks accent extremely well. I would love to be able to do so. Perspective for 2020: a kid with Mimi, CFA Level II, Clojure for numerics and ML, finish my dashboard apps [quick excel viz and model explorer], read more books and more importantly write about them. For the past 24 hours: I solved a printer bug for my parents in law and a javascript bug for my wife for her tabs. I saw my parents in Geneva. I slept and eat really well. I also checked about bikes and fitness studios in ZH. Most importantly, I restarted to write in my journal. During my Christmas vacations, I read thousands of pages of comics, so I am really happy and saw Patrick from New York, and watched the Rise of Skywalker twice, as well as His Dark Materials with Mimi!","title":"January     :wcs:"},{"location":"cards/gratitude/#2016_1","text":"","title":"2016"},{"location":"cards/gratitude/#january_2","text":"[2016-01-04 Mon] Three great things happened in the last 24 hours. I had a wonderful lunch with my parents, I slept extremely well, and my professor was really satisfied about my project in missing data. As a side note, I am really happy to know how to add a bibliography link in a latex document for reftex-mode : %%% reftex-default-bibliography: (\"path/to/bibfile.bib\") [2016-01-03 Sun] Well, I had so many wonderful moments the past few weeks. I retired in the mountains for a few days, then I had my birthday with my colleagues from the SNB, and this was a wonderful night. I went into the new year with my best friend and I could talk with almost all the people I hold dear during the first of January.","title":"January"},{"location":"cards/gratitude/#2015_1","text":"","title":"2015"},{"location":"cards/gratitude/#december_1","text":"[2015-12-12 Sat] I received a really positive year assessment at my job, and I had a great night talking with some colleague from the SNB yesterday. In the past few days, I have been playing with clojure and I am really happy with the language. [2015-12-07 Mon] For one of my project, I coded like hell for a whole day and I am really happy because I learned a lot and could find nice design solutions to my code. But the most warming experience is certainly sleeping with my fiancee during night and cuddle each other in one of nicest city of the world. During the weekend, I also solved some clojure katas and I am really proud of it! [2015-12-03 Thu] Today I was pretty geeky, I cleaned my flat, and I read two chapters of clojure the brave and the true, but the most difficult ones: clojure metaphysics and core.async. They are not so difficult and I am really happy to have understood it! [2015-12-02 Wed] With my fiancee, we went to a wonderful Japanese sushi restaurant and had a great time together where we shared our daily life. Her speaking partner who trains her at Swiss German, told me I had a decent accent. [2015-12-01 Tue] Today, I had lunch with George, an old colleague from the SNB and we went to the Don Leone, a great pizzeria in Z\u00fcrich. We discussed data science and several computer hack. I also learn a little bit more about him. Side note: I solved three problems on 4clojure and I finished to read All-Star Superman from Grant-Morrison.","title":"December"},{"location":"cards/gratitude/#november_1","text":"[2015-11-30 Mon] I have seen my family in Geneva and we had a great time eating together, talking about the future or the holidays.","title":"November"},{"location":"cards/gratitude/#self-help","text":"","title":"Self-help"},{"location":"cards/gratitude/#relationships","text":"Actions speaks more than words: provide your undivided attention to your audience [put away your phone]. Show you are totally focused. Reversal questions: keep the other speaking with two beats sentences [feedback/acknowledge, return of the energy]. Genuine feedback based on evidence and information.","title":"Relationships"},{"location":"cards/gratitude/#writing","text":"Write to communicate not to impress: Use positive tense, short is best, replace verb + adverb with verb.","title":"Writing"},{"location":"cards/gratitude/#see-also-generated","text":"Home for ideas for my Zettelkasten","title":"See also (generated)"},{"location":"cards/python/","text":"Python \u00b6 [X] IPython [X] Jupyter Noteboks jupyter notebooks [ ] scikit, read documentation. [X] pylint pylintrc to determine which mistakes to solve. One can also use # pylint header in python files, e.g. pandas source code. you can use disable [X] pyflakes [ ] nose2 and automatic test. [X] Google Tensorflow . [ ] pytorch See also (generated) \u00b6 ETHZ R CRAN","title":"Python"},{"location":"cards/python/#python","text":"[X] IPython [X] Jupyter Noteboks jupyter notebooks [ ] scikit, read documentation. [X] pylint pylintrc to determine which mistakes to solve. One can also use # pylint header in python files, e.g. pandas source code. you can use disable [X] pyflakes [ ] nose2 and automatic test. [X] Google Tensorflow . [ ] pytorch","title":"Python"},{"location":"cards/python/#see-also-generated","text":"ETHZ R CRAN","title":"See also (generated)"},{"location":"cards/r_cran/","text":"R \u00b6 [X] Do the empirical stuff, start MSc Thesis. [X] Go through base R functions to discover new functions. [ ] Rcpp after revising C++. [X] Shiny. [ ] Set lintr on Emacs. See also (generated) \u00b6 ETHZ Python","title":"R"},{"location":"cards/r_cran/#r","text":"[X] Do the empirical stuff, start MSc Thesis. [X] Go through base R functions to discover new functions. [ ] Rcpp after revising C++. [X] Shiny. [ ] Set lintr on Emacs.","title":"R"},{"location":"cards/r_cran/#see-also-generated","text":"ETHZ Python","title":"See also (generated)"},{"location":"cards/readings/","text":"Books \u00b6 DONE How Google works \u00b6 Culture is the one thing to get right. Smart creatives are the core of the company. These are monsters, who can do everything and are social people. Hiring is vital, colleagues must be learning animals and smarter than you are. Consensus brings opposite point of view. Design someone as owner of meetings, transparency (about objectives, results and key results for all employees), manager sets deadlines. Innovation: shoot for the moon. Default to open for your technology. Quality of a product is the only dimension on which on should focus. Create new products because of technical insight. TODO Work rules from Google \u00b6 Culture makes it right. Vision. Openess. Hire smarter than you (in some meaningful way). Committee hiring. Trust your employees, managers to decide about deadlines and conflict. Performance review: 5 rank OKR: objectives, key, results and transparency about OKR. Manager Gives actionable feedback that helps improve performance No micromanagement Consideration as a person Keeps team focused on priority results/deliverable. Share relevant information from his manager and senior leadership. Meaningful discussion about career development every six months. Comminucates clear goals. Has techincal expertise required to effectively manage. Should be recommended to other coworkers. Learning: focus on learning few things but well. Repetition and internalization concepts or teaching material. TODO When To Rob A Bank. \u00b6 Culture Code. \u00b6 TODO The Art of Unix Programming \u00b6 Philosophy of linux. TODO Principles of financial engineering \u00b6 TODO Becoming a better programmer, Pete Goodliffe \u00b6 You.write(code) Favor common convention in style, strive for consistency and clarity, good design is better that good presentation. Write less code (elegance is paramount, DRY). Pay attention to logic operator to avoid if-else construct, use existing code to avoid bugs, delete dead code (never called function, never read variable, unused parameters and other types). Comments should explain the why . Try to use ternary operator as much as possible. Take responsibility of code removal and leave code a little better than it was. Improve code by remove it. Do not write code that you do not need now . A system can improve by removing code. It is inevitable that dead code arises. Zombie code makes your life harder. TODO Code Craft, Pete Goodliffe \u00b6 TODO Why I left Goldman Sachs \u00b6 TODO Lords of Finance \u00b6 TODO The Finance Curse: How global finance is making us all poorer \u00b6 SICP \u00b6 See also (generated) \u00b6 Home for ideas for my Zettelkasten","title":"Books"},{"location":"cards/readings/#books","text":"","title":"Books"},{"location":"cards/readings/#done-how-google-works","text":"Culture is the one thing to get right. Smart creatives are the core of the company. These are monsters, who can do everything and are social people. Hiring is vital, colleagues must be learning animals and smarter than you are. Consensus brings opposite point of view. Design someone as owner of meetings, transparency (about objectives, results and key results for all employees), manager sets deadlines. Innovation: shoot for the moon. Default to open for your technology. Quality of a product is the only dimension on which on should focus. Create new products because of technical insight.","title":"DONE How Google works"},{"location":"cards/readings/#todo-work-rules-from-google","text":"Culture makes it right. Vision. Openess. Hire smarter than you (in some meaningful way). Committee hiring. Trust your employees, managers to decide about deadlines and conflict. Performance review: 5 rank OKR: objectives, key, results and transparency about OKR. Manager Gives actionable feedback that helps improve performance No micromanagement Consideration as a person Keeps team focused on priority results/deliverable. Share relevant information from his manager and senior leadership. Meaningful discussion about career development every six months. Comminucates clear goals. Has techincal expertise required to effectively manage. Should be recommended to other coworkers. Learning: focus on learning few things but well. Repetition and internalization concepts or teaching material.","title":"TODO Work rules from Google"},{"location":"cards/readings/#todo-when-to-rob-a-bank","text":"","title":"TODO When To Rob A Bank."},{"location":"cards/readings/#culture-code","text":"","title":"Culture Code."},{"location":"cards/readings/#todo-the-art-of-unix-programming","text":"Philosophy of linux.","title":"TODO The Art of Unix Programming"},{"location":"cards/readings/#todo-principles-of-financial-engineering","text":"","title":"TODO Principles of financial engineering"},{"location":"cards/readings/#todo-becoming-a-better-programmer-pete-goodliffe","text":"You.write(code) Favor common convention in style, strive for consistency and clarity, good design is better that good presentation. Write less code (elegance is paramount, DRY). Pay attention to logic operator to avoid if-else construct, use existing code to avoid bugs, delete dead code (never called function, never read variable, unused parameters and other types). Comments should explain the why . Try to use ternary operator as much as possible. Take responsibility of code removal and leave code a little better than it was. Improve code by remove it. Do not write code that you do not need now . A system can improve by removing code. It is inevitable that dead code arises. Zombie code makes your life harder.","title":"TODO Becoming a better programmer, Pete Goodliffe"},{"location":"cards/readings/#todo-code-craft-pete-goodliffe","text":"","title":"TODO Code Craft, Pete Goodliffe"},{"location":"cards/readings/#todo-why-i-left-goldman-sachs","text":"","title":"TODO Why I left Goldman Sachs"},{"location":"cards/readings/#todo-lords-of-finance","text":"","title":"TODO Lords of Finance"},{"location":"cards/readings/#todo-the-finance-curse-how-global-finance-is-making-us-all-poorer","text":"","title":"TODO The Finance Curse: How global finance is making us all poorer"},{"location":"cards/readings/#sicp","text":"","title":"SICP"},{"location":"cards/readings/#see-also-generated","text":"Home for ideas for my Zettelkasten","title":"See also (generated)"},{"location":"cards/unix/","text":"Unix command learning \u00b6 [X] find command: options are: -name (\"*.cpp\" or \".c\") , -type (f, d) , -mtime , use +/-[:digit:] for saying \u201cmore or less [:digit:] time\u201d, escaped parentheses \\( \\) , -a(nd) or -o(r) ! (negation) . The -exec option passes the result to the following instruction (like ls -s) with {} \\; for the place holder of the find results. [ ] Grep [ ] cron (scheduling). See also (generated) \u00b6 -","title":"Unix command learning"},{"location":"cards/unix/#unix-command-learning","text":"[X] find command: options are: -name (\"*.cpp\" or \".c\") , -type (f, d) , -mtime , use +/-[:digit:] for saying \u201cmore or less [:digit:] time\u201d, escaped parentheses \\( \\) , -a(nd) or -o(r) ! (negation) . The -exec option passes the result to the following instruction (like ls -s) with {} \\; for the place holder of the find results. [ ] Grep [ ] cron (scheduling).","title":"Unix command learning"},{"location":"cards/unix/#see-also-generated","text":"-","title":"See also (generated)"},{"location":"cards/website/","text":"Website [3/3] Recreate online cv with middleman and org for blog See also (generated) Website [3/3] \u00b6 [X] Learn html and css (udacity). [X] middleman (ruby) for static page generation. [3/3] [X] HAML, partial and filters. [X] Bootrstrap inteegration [X] Use the following to deploy interactively with live-reload. bundle exec middleman [X] Write about codemirror and mathjax in codemirror Recreate online cv with middleman and org for blog \u00b6 [X] Online cv done. [ ] Understand middleman gh-page for blog. [ ] Links org files. [ ] Publish summaries. See also (generated) \u00b6 -","title":"Website"},{"location":"cards/website/#website-33","text":"[X] Learn html and css (udacity). [X] middleman (ruby) for static page generation. [3/3] [X] HAML, partial and filters. [X] Bootrstrap inteegration [X] Use the following to deploy interactively with live-reload. bundle exec middleman [X] Write about codemirror and mathjax in codemirror","title":"Website [3/3]"},{"location":"cards/website/#recreate-online-cv-with-middleman-and-org-for-blog","text":"[X] Online cv done. [ ] Understand middleman gh-page for blog. [ ] Links org files. [ ] Publish summaries.","title":"Recreate online cv with middleman and org for blog"},{"location":"cards/website/#see-also-generated","text":"-","title":"See also (generated)"},{"location":"decks/clojure/","text":"Clojure \u00b6 General \u00b6 [X] Check flycheck with clojure (if useful, use clj-kondo). Concepts \u00b6 [ ] specs: write about the principal functions. Test and use generative testing with specs. [ ] Create generators using asnyc and neanderthal. [ ] transducers: use them more extensively. [ ] core.async: find excuses to use them. [ ] Integrant [ ] aero/enviro [whatever works with cljs] [ ] Datomic [ ] Webworkers TODO Web Development with Clojure \u00b6 A handler is a function that receive a request map (and response callaback and raise callback) and returns a response map or calls the reponse callback on the response map. A middleware is a function that whose first argument is a handler and should return a handler. Clojurescript \u00b6 [X] https://github.com/bhauman/lein-figwheel [shadow-cljs is more useful] [ ] tools.deps, read more about arguments. [X] Understand how to wrap javascript code into Clojure. Use NPM. How to communicate between clojure and clojurescript (cljc) or sente. [ ] https://funcool.github.io/clojurescript-unraveled/ [ ] Make a summary of core.async chapter. Udemy [core.async] Elements of Clojure \u00b6 Naming \u00b6 There is a difference between the sign (the symbols or letters) and the referent (the thing/value to which the sign refers). Consistency is one of the feature that allow to grow. Precision is a trade-off with generality. synthetic allow precision, natural allows beginners to understand (trade off wit how much to learn before being productive). Idioms \u00b6 Indirection \u00b6 Indirection is the process of separating the how from the what . It useful when answering the question How does it work is answered best with it depends . Reference and conditionals are two tools to perform indirection. Getting the referent from a reference is called dereferencing . Reference are open, while conditional are closed (which could be a feature). Another difference is the order matters in conditional (like cond ). Dispatch happens in two context runtime ( dynamic ) and compile time ( static dispatching). Best to avoid hierarchies. Abstraction should be simplest model that satisfies the context requirements and self consistent. It depends on the context which sets the minimal set of constraints to pay attention to. As such it lives in a bubble/context. Hence, we should ask, what are the assumptions of the code? There are the two distinction for abstraction Principled vs Adaptable. Principled allows to create big architecture artifacts, but they are not adaptable (castle cards or sky scrapper, changing a room are hard). We should thrive for complex adaptable network, that is small components that are principled but in an adaptable network (pieces can be removed and substituted). How to gather code to create principled component? If code have the same set of assumption, then good place to gather them. Change is constant. Blogs \u00b6 Agile is an attitude - Russ Olsen Cognitect [2017] \u00b6 The Monkey wrench of agile is the following: To get the job done you need to focus on the goal and the people who will get you there. There is no magic recipe, no set of practices that will guarantee success You need to be ready to throw away the rule book and bob and weave and flex with whatever comes next. You need to improvise, adapt and overcome. Above all, agile means keeping your eye on the fundamentals: What are the goals? And how are we going to get there? You need to be ready to throw away the rule book and bob and weave and flex with whatever comes next. You need to improvise, adapt and overcome . Above all, agile means keeping your eye on the fundamentals: What are the goals? And how are we going to get there? . You need to improvise, adapt and overcome. What are the goals, and how are we going to get there? When agile processes make sense, use them. When they don\u2019t, let them go without regret. Iteration Zero - Naoko Higashide Cognitect [2017] \u00b6 The framework is about people first, conversations, realizations, and shared understanding. Bring people who will participate (not attend). First is to define responsibilities. will for . Finishing lines. The project will be complete when\u2026 Winning condition. Of the following choose three and describe: Schedule Scope Quality Budget Customer Satisfaction Teamwork / Learning Make sure that project\u2019s sponsor is aligned with those of the team. Talks \u00b6 Maybe not - Rich Hickey [2018] \u00b6 The talk is about clojure.spec and about the optionality in requirements. Static typing proponents will always talks about the benefits of types without ever mentioning the costs. In non breaking changes of API (requiring less, providing more), static typing will break APIs callers. Records in contrast to maps (open sets of keys and values) are PLOP. Because you need to place something in the slot where they contain data, and hence options. Clojure will always forbid to create brittle system with closed specifications. In Clojure, when an field of information (the value of a key in map) in unknown, the key is removed from the map (and avoid keys with nil value). Because if the value is nil , we don\u2019t know if we should be worried if the value is nil or if it is valid. In contrast, if the key is not in the map we can safely ignore it. Data aggregates are herd of information and is moving from one process to another. The solution is to define herd is to split the specifications into two: a schema describing the aggregate (and its tree) and a context whenever in function calls and returns. Specs Leverage/Testing/Custom Generators, Screencast- Stuart Halloway [2016] \u00b6 The advantage are validation, conformance, destructuring, error message, composition, example data generation, assertion, documentation, generative testing, instrumentation. It is about specs. Specs allows to define attributes, composites and function specs. A function specs takes three keys :args , :ret and :fn (which takes the specs as argument). The most interesting is the fn which is describe properties of the function returns. Specs allows to use regular expression on data structure for creating your specs. You can use s/exercise for generating sample of your spec and (test/check `my-fn) and test/summarize-result for checking your function specs. The function s/valid? and s/explain-data allows to validate and to get data for our mistakes. Whenever testing, you also can use test/instrument to instrument your function for better error message. s/alt for alternative, s/and for predicates aggregation, s/or for or predicate composition. Maybe s/& . The function gen/fmap takes a value from a generate and returns a value, while gen/let and gen/bind takes a generator and return a generator. Usually these are wrapped into functions and called with ( s/exercise ::s { ::s wrapper-around-fmap }) ;; or ( s/def ::s ( s/spec pred? :gen wrapper-around-fmap )) Usually, gen/let and gen/bind are used in conjunction with a model for representing the input data. The model acts as generator of test input, helping to conceptualize the expected inputs. For example ( def model ( s/cat :prefix string? :match string? :suffix string? )) when testing a index-of function for string. Write about s/fspec . The trick in using s/fspec is to provide reasonable generators. Using the gen/return allows to wrap a high order function as a generator . Read test.check.generator for more details . Design, Composition and Performance [2013] \u00b6 What is a good design? Separating into things that can be composed. Each component should be about one or a few things. We solve a problem by composing the parts. It is iterative. Design is about taking things apart. Requirements: Move from the want/need to the problems. Explicit the knowns to the unknowns. Requirement from the domain side (how the information is transformed) to the solution side (on which technology should the code run). We can split the cause and the symptom for the problem, and explicit the unstated requirement (e.g. should not destroy the machine or crash). Time, order and flow: In which ordering are the operation to happen, can they be commutative? Place, participants: Who is participating into the process? Which processes? Information and mechanism: Which components belongs to the information or business problem, and which belongs to the technical solution. Solutions: We have to compare multiple solutions and state their benefits and trade offs. We should separate need/features from the intrinsic problem. Learning requires inefficiency. Constraint is a driver of Creativity. So we should ask as much constraint as possible when solving a problem. We are forced to take a choice and move on. Design is imagining (potential solution) and embrace constraints, create additional if not enough restrictive. It is optimistic, be positive and imagine a lot. Design is about making decisions. The value conveyed is in decisions made. Performing is preparing (planning). We should practice and study. Develop sensibilities you can apply on the fly (pattern, techniques to know what works and what not). Design is about take things apart in order to be able to pull them back together. Design like Bartok (communication very well at multiple levels). Code like Coltrane (preparedness and experience, by doing multiple things and not the same thing over and over). Choose tools that are like instruments (stable, simple and oriented at one thing and around people who know how to use them). They should express a fundamental idea (excitation for instruments). Try to pursue harmony in the design. See also (generated) \u00b6 Applied Clojure CLI Arguments Clojure for the brave and the true core.async David Nolen Home for ideas for my Zettelkasten Life In Dynamic Typing Mastering Clojure Macro Multiple Environment Quotes shadow-cljs Simple Made Easy specs","title":"Clojure"},{"location":"decks/clojure/#clojure","text":"","title":"Clojure"},{"location":"decks/clojure/#general","text":"[X] Check flycheck with clojure (if useful, use clj-kondo).","title":"General"},{"location":"decks/clojure/#concepts","text":"[ ] specs: write about the principal functions. Test and use generative testing with specs. [ ] Create generators using asnyc and neanderthal. [ ] transducers: use them more extensively. [ ] core.async: find excuses to use them. [ ] Integrant [ ] aero/enviro [whatever works with cljs] [ ] Datomic [ ] Webworkers","title":"Concepts"},{"location":"decks/clojure/#todo-web-development-with-clojure","text":"A handler is a function that receive a request map (and response callaback and raise callback) and returns a response map or calls the reponse callback on the response map. A middleware is a function that whose first argument is a handler and should return a handler.","title":"TODO Web Development with Clojure"},{"location":"decks/clojure/#clojurescript","text":"[X] https://github.com/bhauman/lein-figwheel [shadow-cljs is more useful] [ ] tools.deps, read more about arguments. [X] Understand how to wrap javascript code into Clojure. Use NPM. How to communicate between clojure and clojurescript (cljc) or sente. [ ] https://funcool.github.io/clojurescript-unraveled/ [ ] Make a summary of core.async chapter. Udemy [core.async]","title":"Clojurescript"},{"location":"decks/clojure/#elements-of-clojure","text":"","title":"Elements of Clojure"},{"location":"decks/clojure/#naming","text":"There is a difference between the sign (the symbols or letters) and the referent (the thing/value to which the sign refers). Consistency is one of the feature that allow to grow. Precision is a trade-off with generality. synthetic allow precision, natural allows beginners to understand (trade off wit how much to learn before being productive).","title":"Naming"},{"location":"decks/clojure/#idioms","text":"","title":"Idioms"},{"location":"decks/clojure/#indirection","text":"Indirection is the process of separating the how from the what . It useful when answering the question How does it work is answered best with it depends . Reference and conditionals are two tools to perform indirection. Getting the referent from a reference is called dereferencing . Reference are open, while conditional are closed (which could be a feature). Another difference is the order matters in conditional (like cond ). Dispatch happens in two context runtime ( dynamic ) and compile time ( static dispatching). Best to avoid hierarchies. Abstraction should be simplest model that satisfies the context requirements and self consistent. It depends on the context which sets the minimal set of constraints to pay attention to. As such it lives in a bubble/context. Hence, we should ask, what are the assumptions of the code? There are the two distinction for abstraction Principled vs Adaptable. Principled allows to create big architecture artifacts, but they are not adaptable (castle cards or sky scrapper, changing a room are hard). We should thrive for complex adaptable network, that is small components that are principled but in an adaptable network (pieces can be removed and substituted). How to gather code to create principled component? If code have the same set of assumption, then good place to gather them. Change is constant.","title":"Indirection"},{"location":"decks/clojure/#blogs","text":"","title":"Blogs"},{"location":"decks/clojure/#agile-is-an-attitude-russ-olsen-cognitect-2017","text":"The Monkey wrench of agile is the following: To get the job done you need to focus on the goal and the people who will get you there. There is no magic recipe, no set of practices that will guarantee success You need to be ready to throw away the rule book and bob and weave and flex with whatever comes next. You need to improvise, adapt and overcome. Above all, agile means keeping your eye on the fundamentals: What are the goals? And how are we going to get there? You need to be ready to throw away the rule book and bob and weave and flex with whatever comes next. You need to improvise, adapt and overcome . Above all, agile means keeping your eye on the fundamentals: What are the goals? And how are we going to get there? . You need to improvise, adapt and overcome. What are the goals, and how are we going to get there? When agile processes make sense, use them. When they don\u2019t, let them go without regret.","title":"Agile is an attitude - Russ Olsen Cognitect [2017]"},{"location":"decks/clojure/#iteration-zero-naoko-higashide-cognitect-2017","text":"The framework is about people first, conversations, realizations, and shared understanding. Bring people who will participate (not attend). First is to define responsibilities. will for . Finishing lines. The project will be complete when\u2026 Winning condition. Of the following choose three and describe: Schedule Scope Quality Budget Customer Satisfaction Teamwork / Learning Make sure that project\u2019s sponsor is aligned with those of the team.","title":"Iteration Zero - Naoko Higashide Cognitect [2017]"},{"location":"decks/clojure/#talks","text":"","title":"Talks"},{"location":"decks/clojure/#maybe-not-rich-hickey-2018","text":"The talk is about clojure.spec and about the optionality in requirements. Static typing proponents will always talks about the benefits of types without ever mentioning the costs. In non breaking changes of API (requiring less, providing more), static typing will break APIs callers. Records in contrast to maps (open sets of keys and values) are PLOP. Because you need to place something in the slot where they contain data, and hence options. Clojure will always forbid to create brittle system with closed specifications. In Clojure, when an field of information (the value of a key in map) in unknown, the key is removed from the map (and avoid keys with nil value). Because if the value is nil , we don\u2019t know if we should be worried if the value is nil or if it is valid. In contrast, if the key is not in the map we can safely ignore it. Data aggregates are herd of information and is moving from one process to another. The solution is to define herd is to split the specifications into two: a schema describing the aggregate (and its tree) and a context whenever in function calls and returns.","title":"Maybe not - Rich Hickey [2018]"},{"location":"decks/clojure/#specs-leveragetestingcustom-generators-screencast-stuart-halloway-2016","text":"The advantage are validation, conformance, destructuring, error message, composition, example data generation, assertion, documentation, generative testing, instrumentation. It is about specs. Specs allows to define attributes, composites and function specs. A function specs takes three keys :args , :ret and :fn (which takes the specs as argument). The most interesting is the fn which is describe properties of the function returns. Specs allows to use regular expression on data structure for creating your specs. You can use s/exercise for generating sample of your spec and (test/check `my-fn) and test/summarize-result for checking your function specs. The function s/valid? and s/explain-data allows to validate and to get data for our mistakes. Whenever testing, you also can use test/instrument to instrument your function for better error message. s/alt for alternative, s/and for predicates aggregation, s/or for or predicate composition. Maybe s/& . The function gen/fmap takes a value from a generate and returns a value, while gen/let and gen/bind takes a generator and return a generator. Usually these are wrapped into functions and called with ( s/exercise ::s { ::s wrapper-around-fmap }) ;; or ( s/def ::s ( s/spec pred? :gen wrapper-around-fmap )) Usually, gen/let and gen/bind are used in conjunction with a model for representing the input data. The model acts as generator of test input, helping to conceptualize the expected inputs. For example ( def model ( s/cat :prefix string? :match string? :suffix string? )) when testing a index-of function for string. Write about s/fspec . The trick in using s/fspec is to provide reasonable generators. Using the gen/return allows to wrap a high order function as a generator . Read test.check.generator for more details .","title":"Specs Leverage/Testing/Custom Generators, Screencast- Stuart Halloway [2016]"},{"location":"decks/clojure/#design-composition-and-performance-2013","text":"What is a good design? Separating into things that can be composed. Each component should be about one or a few things. We solve a problem by composing the parts. It is iterative. Design is about taking things apart. Requirements: Move from the want/need to the problems. Explicit the knowns to the unknowns. Requirement from the domain side (how the information is transformed) to the solution side (on which technology should the code run). We can split the cause and the symptom for the problem, and explicit the unstated requirement (e.g. should not destroy the machine or crash). Time, order and flow: In which ordering are the operation to happen, can they be commutative? Place, participants: Who is participating into the process? Which processes? Information and mechanism: Which components belongs to the information or business problem, and which belongs to the technical solution. Solutions: We have to compare multiple solutions and state their benefits and trade offs. We should separate need/features from the intrinsic problem. Learning requires inefficiency. Constraint is a driver of Creativity. So we should ask as much constraint as possible when solving a problem. We are forced to take a choice and move on. Design is imagining (potential solution) and embrace constraints, create additional if not enough restrictive. It is optimistic, be positive and imagine a lot. Design is about making decisions. The value conveyed is in decisions made. Performing is preparing (planning). We should practice and study. Develop sensibilities you can apply on the fly (pattern, techniques to know what works and what not). Design is about take things apart in order to be able to pull them back together. Design like Bartok (communication very well at multiple levels). Code like Coltrane (preparedness and experience, by doing multiple things and not the same thing over and over). Choose tools that are like instruments (stable, simple and oriented at one thing and around people who know how to use them). They should express a fundamental idea (excitation for instruments). Try to pursue harmony in the design.","title":"Design, Composition and Performance [2013]"},{"location":"decks/clojure/#see-also-generated","text":"Applied Clojure CLI Arguments Clojure for the brave and the true core.async David Nolen Home for ideas for my Zettelkasten Life In Dynamic Typing Mastering Clojure Macro Multiple Environment Quotes shadow-cljs Simple Made Easy specs","title":"See also (generated)"}]}